<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant confidence="0.000011" no="0">
<title confidence="0.740422">
A High-Performance Semi-Supervised Learning Method for Text Chunking
</title>
<author confidence="0.364681">
Rie Kubota AndotTong Zhangt
</author>
<affiliation confidence="0.233715">
IBM T.J. Watson Research Center
</affiliation>
<address confidence="0.546077">
Yorktown Heights, NY 10598, U.S.A.
</address>
<email confidence="0.988884">
yrie1@us.ibm.comztongz@us.ibm.com
</email>
<sectionHeader confidence="0.994517" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999813409090909">In machine learning, whether one can build a more accurate classifier by using unlabeled data (semi-supervised learning) is an important issue. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. This paper presents a novel semi-supervised method that employs a learning paradigm which we call structural learning. The idea is to find “what good classifiers are like” by learning from thousands of automatically generated auxiliary classification problems on unlabeled data. By doing so, the common predictive structure shared by the multiple classification problems can be discovered, which can then be used to improve performance on the target problem. The method produces performance higher than the previous best results on CoNLL’00 syntactic chunking and CoNLL’03 named entity chunking (English and German).</bodyText>
<sectionHeader confidence="0.998882" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999942086956522">In supervised learning applications, one can often find a large amount of unlabeled data without difficulty, while labeled data are costly to obtain. Therefore, a natural question is whether we can use unlabeled data to build a more accurate classifier, given the same amount of labeled data. This problem is often referred to as semi-supervised learning. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang, 2004), which seeks to discover shared predictive structures (i.e. what good classifiers for the task are like) through jointly learning multiple classification problems on unlabeled data. That is, we systematically create thousands of problems (called auxiliary problems) relevant to the target task using unlabeled data, and train classifiers from the automatically generated ‘training data’. We learn the commonality (or structure) of such many classifiers relevant to the task, and use it to improve performance on the target task. One example of such auxiliary problems for chunking tasks is to ‘mask’ a word and predict whether it is “people” or not from the context, like language modeling. Another example is to predict the prediction of some classifier trained for the target task.</bodyText>
<page confidence="0.819027">
1
</page>
<note confidence="0.9214925">
Proceedings of the 43rd Annual Meeting of the ACL, pages 1–9,
Ann Arbor, June 2005. c�2005 Association for Computational Linguistics
</note>
<bodyText confidence="0.999890352941176">These auxiliary classifiers can be adequately learned since we have very large amounts of ‘training data’ for them, which we automatically generate from a very large amount of unlabeled data. The contributions of this paper are two-fold. First, we present a novel robust semi-supervised method based on a new learning model and its application to chunking tasks. Second, we report higher performance than the previous best results on syntactic chunking (the CoNLL’00 corpus) and named entity chunking (the CoNLL’03 English and German corpora). In particular, our results are obtained by using unlabeled data as the only additional resource while many of the top systems rely on hand-crafted resources such as large name gazetteers or even rulebased post-processing.</bodyText>
<sectionHeader confidence="0.985736" genericHeader="method">
2 A Model for Learning Structures
</sectionHeader>
<bodyText confidence="0.9999314">This work uses a linear formulation of structural learning. We first briefly review a standard linear prediction model and then extend it for structural learning. We sketch an optimization algorithm using SVD and compare it to related methods.</bodyText>
<subsectionHeader confidence="0.988667">
2.1 Standard linear prediction model
</subsectionHeader>
<bodyText confidence="0.974769869565217">In the standard formulation of supervised learning, we seek a predictor that maps an input vector x E X to the corresponding output y E Y. Linear prediction models are based on real-valued predictors of the form f (x) = wTx, where w is called a weight vector. For binary problems, the sign of the linear prediction gives the class label. For k-way classification (withk&gt;2), a typical method is winner takes all, where we train one predictor per class and choose the class with the highest output value. A frequently used method for finding an accurate predictor�fis regularized empirical risk minimization (ERM), which minimizes an empirical loss of the predictor (with regularization) on thentraining examples{(Xi;Yi)}: L(f(Xi);Yi)+r(f)): L(.) is a loss function to quantify the difference between the prediction f (Xi) and the true output Yi, andr(.)is a regularization term to control the model complexity. ERM-based methods for discriminative learning are known to be effective for NLP tasks such as chunking (e.g. Kudoh and Matsumoto (2001), Zhang and Johnson (2003)).</bodyText>
<subsectionHeader confidence="0.985231">
2.2 Linear model for structural learning
</subsectionHeader>
<bodyText confidence="0.982794090909091">We present a linear prediction model for structural learning, which extends the traditional model to multiple problems. Specifically, we assume that there exists a low-dimensional predictive structure shared by multiple prediction problems. We seek to discover this structure through joint empirical risk minimization over the multiple problems. Consider m problems indexed by ` E { 1 each with nt samples (Xti; Yt) indexed by i E {1; ::: ; nt}. In our joint linear model, a predictor for problem ` takes the following form where we use I to denote the identity matrix.</bodyText>
<equation confidence="0.960638">
ft(O;x)=wTtx+vTtOx;OOT=I;(1)
</equation>
<bodyText confidence="0.999510571428571">Matrix O (whose rows are orthonormal) is the common structure parameter shared by all the problems; wt and vt are weight vectors specific to each prediction problem `. The idea of this model is to discover a common low-dimensional predictive structure (shared by the m problems) parameterized by the projection matrix O. In this setting, the goal of structural learning may also be regarded as learning a good feature map Ox — a low-dimensional feature vector parameterized by O. In joint ERM, we seekO(and weight vectors) that minimizes the empirical risk summed over all the problems:</bodyText>
<equation confidence="0.962665">
+r(f`)).(2)
</equation>
<bodyText confidence="0.999569333333333">It can be shown that using joint ERM, we can reliably estimate the optimal joint parameterOas long asmis large (even when eachntis small). This is the key reason why structural learning is effective. A formal PAC-style analysis can be found in (Ando and Zhang, 2004).</bodyText>
<subsectionHeader confidence="0.999894">
2.3 Alternating structure optimization (ASO)
</subsectionHeader>
<bodyText confidence="0.995275">The optimization problem (2) has a simple solution using SVD when we choose square regularization:</bodyText>
<figure confidence="0.4864882">
�f=argmin
f
�i�n�
[O,{ ^f`}]=argmin `=1 �i=1nQ L(f`(o,X`i),Y`i)
0;�fil n`
</figure>
<page confidence="0.624659">
2
</page>
<bodyText confidence="0.858667">r (ft) = A I I wt I I 2 , where the regularization parameter A is given. For clarity, let ut be a weight vector for problemfsuch that:ut=wt+OTvt.Then, (2) becomes the minimization of the joint empirical risk written as:</bodyText>
<equation confidence="0.957953">
+AJJu`—OTv`JJ22�.(3)
</equation>
<bodyText confidence="0.994708904761905">This minimization can be approximately solved by the following alternating optimization procedure: •Fix(O,{vt}), and findmpredictors{ut}that minimizes the joint empirical risk (3). •Fixmpredictors{ut}, and find(O,{vt})that minimizes the joint empirical risk (3). •Iterate until a convergence criterion is met. In the first step, we train m predictors independently. It is the second step that couples all the problems. Its solution is given by the SVD (singular value decomposition) of the predictor matrix U = [u 1, ... , ur,, ] : the rows of the optimum O are given by the most significant left singular vectors1 of U. Intuitively, the optimum O captures the maximal commonality of the m predictors (each derived from ut). These m predictors are updated using the new structure matrix O in the next iteration, and the process repeats. Figure 1 summarizes the algorithm sketched above, which we call the alternating structure optimization (ASO) algorithm. The formal derivation can be found in (Ando and Zhang, 2004).</bodyText>
<subsectionHeader confidence="0.999655">
2.4 Comparison with existing techniques
</subsectionHeader>
<bodyText confidence="0.9997699">It is important to note that this SVD-based ASO (SVD-ASO) procedure is fundamentally different from the usual principle component analysis (PCA), which can be regarded as dimension reduction in the data spaceX. By contrast, the dimension reduction performed in the SVD-ASO algorithm is on the predictor space (a set of predictors). This is possible because we observe multiple predictors from multiple learning tasks. If we regard the observed predictors as sample points of the predictor distribution in</bodyText>
<footnote confidence="0.70915625">
1In other words, O is computed so that the best low-rank
approximation of U in the least square sense is obtained by
projecting U onto the row space of O; see e.g. Golub and Loan
(1996) for SVD.
</footnote>
<figureCaption confidence="0.9817035">
Figure 1: SVD-based Alternating Structure Optimization
(SVD-ASO) Algorithm
the predictor space (corrupted with estimation error, or noise), then SVD-ASO can be interpreted as finding the “principle components” (or commonality) of these predictors (i.e., “what good predictors are like”).</figureCaption>
<bodyText confidence="0.99998984">Consequently the method directly looks for low-dimensional structures with the highest predictive power. By contrast, the principle components of input data in the data space (which PCA seeks) may not necessarily have the highest predictive power. The above argument also applies to the feature generation from unlabeled data using LSI (e.g.Ando (2004)).Similarly, Miller et al. (2004) used word-cluster memberships induced from an unannotated corpus as features for named entity chunking. Our work is related but more general, because we can explore additional information from unlabeled data using many different auxiliary problems.Since Miller et al. (2004)’s experiments used a proprietary corpus, direct performance comparison is not possible. However, our preliminary implementation of the word clustering approach did not provide any improvement on our tasks. As we will see, our starting performance is already high. Therefore the additional information discovered by SVD-ASO appears crucial to achieve appreciable improvements.</bodyText>
<sectionHeader confidence="0.957574" genericHeader="method">
3 Semi-supervised Learning Method
</sectionHeader>
<bodyText confidence="0.998973333333333">For semi-supervised learning, the idea is to create many auxiliary prediction problems (relevant to the task) from unlabeled data so that we can learn the shared structureO(useful for the task) using the ASO algorithm.</bodyText>
<figure confidence="0.783014684210526">
Input: training data{(X`i,Y`i)}(f=1,...,m)
Parameters: dimensionhand regularization paramA
Output: matrix O with h rows
Initialize: u` = 0 (f = 1... m), and arbitrary O
iterate
forf=1tomdo
With fixedOandv`=Ou`, solve forw`:
[��` L(wQ X1+(�T`O)X`iY`)
w` = arg minw` 1=1 '
+AJJw`JJ22]
Let u` = w` + OT v`
endfor
Compute the SVD of U = [u1, ... , um].
Let the rows of O be the h left singular vectors of U
corresponding to thehlargest singular values.
until converge
L(uT`X`i,Y`i)
n`
`=1 �m �i=1n`
</figure>
<page confidence="0.981305">
3
</page>
<bodyText confidence="0.998037466666667">In particular, we want to create auxiliary problems with the following properties: .Automatic labeling: we need to automatically generate various “labeled” data for the auxiliary problems from unlabeled data.•Relevancy: auxiliary problems should be related to the target problem. That is, they should share a certain predictive structure. The final classifier for the target task is in the form of (1), a linear predictor for structural learning. We fixO(learned from unlabeled data through auxiliary problems) and optimize weight vectorswandv on the given labeled data. We summarize this semisupervised learning procedure below.</bodyText>
<listItem confidence="0.99909925">1. Create training data 4={( �X�;�Yf)}for each auxiliary problemffrom unlabeled data{ �X(}. 2. ComputeOfrom{�Zt}through SVD-ASO. 3. Minimize the empirical risk on the labeled data:</listItem>
<bodyText confidence="0.62089">f = arg min f E ��1 L(f(o Xi)&gt;Yi) + ~11w1122, where f (O; x) = wTx + vTOx as in (1).</bodyText>
<subsectionHeader confidence="0.999374">
3.1 Auxiliary problem creation
</subsectionHeader>
<bodyText confidence="0.999990625">The idea is to discover useful features (which do not necessarily appear in the labeled data) from the unlabeled data through learning auxiliary problems. Clearly, auxiliary problems more closely related to the target problem will be more beneficial. However, even if some problems are less relevant, they will not degrade performance severely since they merely result in some irrelevant features (originated from irrelevantO-components), which ERM learners can cope with. On the other hand, potential gains from relevant auxiliary problems can be significant. In this sense, our method is robust. We present two general strategies for generating useful auxiliary problems: one in a completely unsupervised fashion, and the other in a partiallysupervised fashion.</bodyText>
<subsectionHeader confidence="0.900024">
3.1.1 Unsupervised strategy
</subsectionHeader>
<bodyText confidence="0.99922528">In the first strategy, we regard some observable substructures of the input dataXas auxiliary class labels, and try to predict these labels using other parts of the input data. Ex 3.1 Predict words. Create auxiliary problems by regarding the word at each position as an auxiliary label, which we want to predictfrom the context. For instance, predict whether a word is “Smith” or not from its context. This problem is relevant to, for instance, named entity chunking since knowing a word is “Smith” helps to predict whether it is part ofa name. One binary classification problem can be created for each possible word value (e.g., “IBM”, “he”, “get”,••J. Hence, many auxiliary problems can be obtained using this idea. More generally, given a feature representation of the input data, we may mask some features as unobserved, and learn classifiers to predict these ‘masked’ features based on other features that are not masked. The automatic-labeling requirement is satisfied since the auxiliary labels are observable to us. To create relevant problems, we should choose to (mask and) predict features that have good correlation to the target classes, such as words on text tagging/chunking tasks.</bodyText>
<subsectionHeader confidence="0.654915">
3.1.2 Partially-supervised strategy
</subsectionHeader>
<bodyText confidence="0.988363636363636">The second strategy is motivated by co-training. We use two (or more) distinct feature maps:-P1 and 'P2. First, we train a classifier F1 for the target task, using the feature map -P1 and the labeled data. The auxiliary tasks are to predict the behavior of this classifier F1 (such as predicted labels) on the unlabeled data, by using the other feature map P2. Note that unlike co-training, we only use the classifier as a means of creating auxiliary problems that meet the relevancy requirement, instead of using it to bootstrap labels. Ex 3.2 Predict the top-k choices of the classifier. Predict the combination of k (a few) classes to which F1 assigns the highest output (confidence) values. For instance, predict whether F1 assigns the highest confidence values to CLASS1 and CLASS2 in this order. By setting k = 1, the auxiliary task is simply to predict the label prediction of classifier F1. By setting k &gt; 1, fine-grained distinctions (related to intrinsic sub-classes of target classes) can be learned. From a c-way classification problem, c!=(c — k)! binary prediction problems can be created.</bodyText>
<page confidence="0.995575">
4
</page>
<sectionHeader confidence="0.955596" genericHeader="method">
4 Algorithms Used in Experiments
</sectionHeader>
<bodyText confidence="0.9999165">Using auxiliary problems introduced above, we study the performance of our semi-supervised learning method on named entity chunking and syntactic chunking. This section describes the algorithmic aspects of the experimental framework. The taskspecific setup is described in Sections 5 and 6.</bodyText>
<subsectionHeader confidence="0.996791">
4.1 Extension of the basic SVD-ASO algorithm
</subsectionHeader>
<bodyText confidence="0.99998055">In our experiments, we use an extension of SVDASO. In NLP applications, features have natural grouping according to their types/origins such as ‘current words’, ‘parts-of-speech on the right’, and so forth. It is desirable to perform a localized optimization for each of such natural feature groups. Hence, we associate each feature group with a submatrix of structure matrixO. The optimization algorithm for this extension is essentially the same as SVD-ASO in Figure 1, but with the SVD step performed separately for each group. See (Ando and Zhang, 2004) for the precise formulation. In addition, we regularize only those components of wt which correspond to the non-negative part of ut. The motivation is that positive weights are usually directly related to the target concept, while negative ones often yield much less specific information representing ‘the others’. The resulting extension, in effect, only uses the positive components ofUin the SVD computation.</bodyText>
<subsectionHeader confidence="0.8784905">
4.2 Chunking algorithm, loss function, training
algorithm, and parameter settings
</subsectionHeader>
<bodyText confidence="0.999783481481482">As is commonly done, we encode chunk information into word tags to cast the chunking problem to that of sequential word tagging. We perform Viterbistyle decoding to choose the word tag sequence that maximizes the sum of tagging confidence values. In all settings (including baseline methods), the loss function is a modification of the Huber’s robust loss for regression: L(p, y) = max (0,1 — py)2 if py &gt; —1; and —4py otherwise; with square regularization (A=10-4). One may select other loss functions such as SVM or logistic regression. The specific choice is not important for the purpose of this paper. The training algorithm is stochastic gradient descent, which is argued to perform well for regularized convex ERM learning formulations (Zhang, 2004). As we will show in Section 7.3, our formulation is relatively insensitive to the change inh(rowdimension of the structure matrix). We fixh(for each feature group) to 50, and use it in all settings. The most time-consuming process is the training ofmauxiliary predictors on the unlabeled data (computingUin Figure 1). Fixing the number of iterations to a constant, it runs in linear tomand the number of unlabeled instances and takes hours in our settings that use more than 20 million unlabeled instances.</bodyText>
<subsectionHeader confidence="0.994878">
4.3 Baseline algorithms
</subsectionHeader>
<bodyText confidence="0.999969896551724">Supervised classifier For comparison, we train a classifier using the same features and algorithm, but without unlabeled data (O=0in effect). Co-training We test co-training since our idea of partially-supervised auxiliary problems is motivated by co-training. Our implementation follows the original work (Blum and Mitchell, 1998). The two (or more) classifiers (with distinct feature maps) are trained with labeled data. We maintain a pool ofq unlabeled instances by random selection. The classifier proposes labels for the instances in this pool. We choosesinstances for each classifier with high confidence while preserving the class distribution observed in the initial labeled data, and add them to the labeled data. The process is then repeated. We exploreq=50K, 100K,s=50,100,500,1K, and commonly-used feature splits: ‘current vs. context’ and ‘current+left-context vs. current+right-context’. Self-training Single-view bootstrapping is sometimes called self-training. We test the basic selftraining2, which replaces multiple classifiers in the co-training procedure with a single classifier that employs all the features. co/self-training oracle performance To avoid the issue of parameter selection for the coand selftraining, we report their best possible oracle performance, which is the best F-measure number among all the coand self-training parameter settings including the choice of the number of iterations.</bodyText>
<footnote confidence="0.99440475">
2We also tested “self-training with bagging”, which Ng and
Cardie (2003) used for co-reference resolution. We omit results
since it did not produce better performance than the supervised
baseline.
</footnote>
<page confidence="0.996095">
5
</page>
<bodyText confidence="0.994124">words, parts-of-speech (POS), character types, 4 characters at the beginning/ending in a 5-word window. words in a 3-syntactic chunk window. labels assigned to two words on the left. bi-grams of the current word and the label on the left. labels assigned to previous occurrences of the current word.</bodyText>
<figureCaption confidence="0.966596">
Figure 2: Feature types for named entity chunking. POS and
syntactic chunk information is provided by the organizer.
</figureCaption>
<sectionHeader confidence="0.959511" genericHeader="evaluation and result">
5 Named Entity Chunking Experiments
</sectionHeader>
<bodyText confidence="0.999959916666667">We report named entity chunking performance on the CoNLL’03 shared-task3 corpora (English and German). We choose this task because the original intention of this shared task was to test the effectiveness of semi-supervised learning methods. However, it turned out that none of the top performing systems used unlabeled data. The likely reason is that the number of labeled data is relatively large (&gt;200K), making it hard to benefit from unlabeled data. We show that our ASO-based semi-supervised learning method (hereafter, ASO-semi) can produce results appreciably better than all of the top systems, by using unlabeled data as the only additional resource. In particular, we do not use any gazetteer information, which was used in all other systems. The CoNLL corpora are annotated with four types of named entities: persons, organizations, locations, and miscellaneous names (e.g., “World Cup”). We use the official training/development/test splits. Our unlabeled data sets consist of 27 million words (English) and 35 million words (German), respectively. They were chosen from the same sources – Reuters and ECI Multilingual Text Corpus – as the provided corpora but disjoint from them.</bodyText>
<subsectionHeader confidence="0.788039">
5.1 Features
</subsectionHeader>
<bodyText confidence="0.9999594">Our feature representation is a slight modification of a simpler configuration (without any gazetteer) in (Zhang and Johnson, 2003), as shown in Figure 2. We use POS and syntactic chunk information provided by the organizer.</bodyText>
<subsectionHeader confidence="0.999088">
5.2 Auxiliary problems
</subsectionHeader>
<bodyText confidence="0.999971666666667">As shown in Figure 3, we experiment with auxiliary problems from Ex 3.1 and 3.2: “Predict current (or previous or next) words”; and “Predict top-2 choices of the classifier” using feature splits ‘left context vs. the others’ and ‘right context vs. the others’.</bodyText>
<footnote confidence="0.949668">
3http://cnts.uia.ac.be/conll2003/ner
</footnote>
<table confidence="0.997819333333334">
# of aux. Auxiliary Features used for
problems labels learning aux problems
1000 previous words all but previous words
1000 current words all but current words
1000 next words all but next words
72 F1’s top-2 choices -P2(all but left context)
72 F2’s top-2 choices -P1(left context)
72 F3’s top-2 choices -P4(all but right context)
72 F4’s top-2 choices -P3(right context)
</table>
<figureCaption confidence="0.672451857142857">
Figure 3: Auxiliary problems used for named entity chunk-
ing. 3000 problems ‘mask’ words and predict them from the
other features on unlabeled data. 288 problems predict classi-
fierFi’s predictions on unlabeled data, whereFiis trained with
labeled data using feature map-Pi. There are 72 possible top-2
choices from 9 classes (beginning/inside of four types of name
chunks and ‘outside’).
</figureCaption>
<bodyText confidence="0.994377">For word-prediction problems, we only consider the instances whose current words are either nouns or adjectives since named entities mostly consist of these types. Also, we leave out all but at most 1000 binary prediction problems of each type that have the largest numbers of positive examples to ensure that auxiliary predictors can be adequately learned with a sufficiently large number of examples. The results we report are obtained by using all the problems in Figure 3 unless otherwise specified.</bodyText>
<table confidence="0.966542777777778">
5.3 Named entity chunking results
methods test F diff. from supervised
data prec. recall F
English, small (10K examples) training set
ASO-semi dev. 81.25 +10.02 +7.00 +8.51
co/self oracle 73.10 +0.32 +0.39 +0.36
ASO-semi test 78.42 +9.39 +10.73 +10.10
co/self oracle 69.63 +0.60 +1.95 +1.31
English, all (204K) training examples
ASO-semi dev. 93.15 +2.25 +3.00 +2.62
co/self oracle 90.64 +0.04 +0.20 +0.11
ASO-semi test 89.31 +3.20 +4.51 +3.86
co/self oracle 85.40 -0.04 -0.05 -0.05
German, all (207K) training examples
ASO-semi dev. 74.06 +7.04 +10.19 +9.22
co/self oracle 66.47 -2.59 +4.39 +1.63
ASO-semi test 75.27 +4.64 +6.59 +5.88
co/self oracle 70.45 -1.26 +2.59 +1.06
</table>
<figureCaption confidence="0.892016166666667">
Figure 4: Named entity chunking results. No gazetteer. F-
measure and performance improvements over the supervised
baseline in precision, recall, and F. For co- and self-training
(baseline), the oracle performance is shown.
Figure 4 shows results in comparison with the su-
pervised baseline in six configurations, each trained
</figureCaption>
<page confidence="0.998281">
6
</page>
<bodyText confidence="0.999334043478261">with one of three sets of labeled training examples: a small English set (10K examples randomly chosen), the entire English training set (204K), and the entire German set (207K), tested on either the development set or test set. ASO-semi significantly improves both precision and recall in all the six configurations, resulting in improved F-measures over the supervised baseline by +2.62% to +10.10%. Coand self-training, at their oracle performance, improve recall but often degrade precision; consequently, their F-measure improvements are relatively low:—0.05% to +1.63%. Comparison with top systems As shown in Figure 5, ASO-semi achieves higher performance than the top systems on both English and German data. Most of the top systems boost performance by external hand-crafted resources such as: large gazetteers4; a large amount (2 million words) of labeled data manually annotated with finer-grained named entities (FIJZ03); and rule-based post processing (KSNM03). Hence, we feel that our results, obtained by using unlabeled data as the only additional resource, are encouraging.</bodyText>
<table confidence="0.998216">
System Eng. Ger. Additional resources
ASO-semi 89.31 75.27 unlabeled data
FIJZ03 88.76 72.41 gazetteers; 2M-word labeled
data (English)
CN03 88.31 65.67 gazetteers (English); (also
very elaborated features)
KSNM03 86.31 71.90 rule-based post processing
</table>
<figureCaption confidence="0.915738333333333">
Figure 5: Named entity chunking. F-measure on the test
sets. Previous best results: FIJZ03 (Florian et al., 2003), CN03
(Chieu and Ng, 2003), KSNM03 (Klein et al., 2003).
</figureCaption>
<sectionHeader confidence="0.953579" genericHeader="evaluation and result">
6 Syntactic Chunking Experiments
</sectionHeader>
<bodyText confidence="0.999918666666667">Next, we report syntactic chunking performance on the CoNLL’00 shared-task5 corpus. The training and test data sets consist of the Wall Street Journal corpus (WSJ) sections 15–18 (212K words) and section 20, respectively. They are annotated with eleven types of syntactic chunks such as noun phrases. We uniand bi-grams of words and POS in a 5-token window.word-POS bi-grams in a 3-token window.</bodyText>
<footnote confidence="0.997968166666667">
4Whether or not gazetteers are useful depends on their cov-
erage. A number of top-performing systems used their own
gazetteers in addition to the organizer’s gazetteers and reported
significant performance improvements (e.g., FIJZ03, CN03,
and ZJ03).
5http://cnts.uia.ac.be/conll2000/chunking
</footnote>
<bodyText confidence="0.9092646">POS tri-grams on the left and right.labels of the two words on the left and their bi-grams.bi-grams of the current word and two labels on the left.</bodyText>
<figureCaption confidence="0.859939">
Figure 6: Feature types for syntactic chunking. POS informa-
tion is provided by the organizer.
</figureCaption>
<table confidence="0.93506475">
prec. recall F0=1
supervised 93.83 93.37 93.60
ASO-semi 94.57 94.20 94.39 (+0.79)
co/self oracle 93.76 93.56 93.66 (+0.06)
</table>
<figureCaption confidence="0.995738">
Figure 7: Syntactic chunking results.
</figureCaption>
<bodyText confidence="0.9943095">use the WSJ articles in 1991 (15 million words) from the TREC corpus as the unlabeled data.</bodyText>
<subsectionHeader confidence="0.982987">
6.1 Features and auxiliary problems
</subsectionHeader>
<bodyText confidence="0.999982285714286">Our feature representation is a slight modification of a simpler configuration (without linguistic features) in (Zhang et al., 2002), as shown in Figure 6. We use the POS information provided by the organizer. The types of auxiliary problems are the same as in the named entity experiments. For word predictions, we exclude instances of punctuation symbols.</bodyText>
<subsectionHeader confidence="0.999745">
6.2 Syntactic chunking results
</subsectionHeader>
<bodyText confidence="0.99906455">As shown in Figure 7, ASO-semi improves both precision and recall over the supervised baseline. It achieves 94.39% in F-measure, which outperforms the supervised baseline by 0.79%. Coand selftraining again slightly improve recall but slightly degrade precision at their oracle performance, which demonstrates that it is not easy to benefit from unlabeled data on this task. Comparison with the previous best systems As shown in Figure 8, ASO-semi achieves performance higher than the previous best systems. Though the space constraint precludes providing the detail, we note that ASO-semi outperforms all of the previous top systems in both precision and recall. Unlike named entity chunking, the use of external resources on this task is rare. An exception is the use of output from a grammar-based full parser as features in ZDJ02+, which our system does not use. KM01 and CM03 boost performance by classifier combinations. SP03 trains conditional random fields for NP (noun phrases) only.</bodyText>
<page confidence="0.999386">
7
</page>
<table confidence="0.995133571428571">
all NP description
ASO-semi 94.39 94.70 +unlabeled data
KM01 93.91 94.39 SVM combination
CM03 93.74 94.41 perceptron in two layers
SP03 – 94.38 conditional random fields
ZDJ02 93.57 93.89 generalized Winnow
ZDJ02+ 94.17 94.38 +full parser output
</table>
<figureCaption confidence="0.9930965">
Figure 8: Syntactic chunking F-measure. Comparison with
previous best results: KM01 (Kudoh and Matsumoto, 2001),
CM03 (Carreras and Marquez, 2003), SP03 (Sha and Pereira,
2003), ZDJ02 (Zhang et al., 2002).
</figureCaption>
<bodyText confidence="0.9960975">ASO-semi produces higher NP chunking performance than the others.</bodyText>
<sectionHeader confidence="0.998991" genericHeader="result">
7 Empirical Analysis
</sectionHeader>
<subsectionHeader confidence="0.984522">
7.1 Effectiveness of auxiliary problems
</subsectionHeader>
<figureCaption confidence="0.997892666666667">
Figure 9: Named entity F-measure produced by using individ-
ual types of auxiliary problems. Trained with the entire training
sets and tested on the test sets.
</figureCaption>
<bodyText confidence="0.9665165">Figure 9 shows F-measure obtained by computing O from individual types of auxiliary problems on named entity chunking. Both types – “Predict words” and “Predict top-2 choices of the classifier” – are useful, producing significant performance improvements over the supervised baseline. The best performance is achieved when O is produced from all of the auxiliary problems.</bodyText>
<subsectionHeader confidence="0.990212">
7.2 Interpretation of O
</subsectionHeader>
<bodyText confidence="0.999917625">To gain insights into the information obtained from unlabeled data, we examine the O entries associated with the feature ‘current words’, computed for the English named entity task. Figure 10 shows the features associated with the entries ofOwith the largest values, computed from the 2000 unsupervised auxiliary problems: “Predict previous words” and “Predict next words”. For clarity, the figure only shows words beginning with upper-case letters (i.e., likely to be names in English).</bodyText>
<note confidence="0.988373928571429">
row# Features corresponding to Interpretation
significantOentries
4 Ltd, Inc, Plc, International, organizations
Ltd., Association, Group, Inc.
7 Co, Corp, Co., Company, organizations
Authority, Corp., Services
9 PCT, N/A, Nil, Dec, BLN, no names
Avg, Year-on-year, UNCH
11 New, France, European, San, locations
North, Japan, Asian, India
15 Peter, Sir, Charles, Jose, Paul, persons
Lee, Alan, Dan, John, James
26 June, May, July, Jan, March, months
August, September, April
</note>
<figureCaption confidence="0.986828">
Figure 10: Interpretation ofOcomputed from word-
prediction (unsupervised) problems for named entity chunking.
</figureCaption>
<bodyText confidence="0.999931111111111">Our method captures the spirit of predictive word-clustering but is more general and effective on our tasks. It is possible to develop a general theory to show that the auxiliary problems we use are helpful under reasonable conditions. The intuition is as follows. Suppose we split the features into two parts -P1 and 'P2 and predict -P1 based on 'P2. Suppose features in -P1 are correlated to the class labels (but not necessarily correlated among themselves). Then, the auxiliary prediction problems are related to the target task, and thus can reveal useful structures of -P2. Under some conditions, it can be shown that features in 'P2 with similar predictive performance tend to map to similar low-dimensional vectors through O. This effect can be empirically observed in Figure 10 and will be formally shown elsewhere.</bodyText>
<subsectionHeader confidence="0.970721">
7.3 Effect of theOdimension
</subsectionHeader>
<figure confidence="0.770612">
89
87
85
20 40 60 80 100
dimension
</figure>
<figureCaption confidence="0.984529">
Figure 11: F-measure in relation to the row-dimension ofO.
English named entity chunking, test set.
</figureCaption>
<bodyText confidence="0.969606833333333">Recall that throughout the experiments, we fix the row-dimension ofO(for each feature group) to 50. Figure 11 plots F-measure in relation to the rowdimension ofO, which shows that the method is relatively insensitive to the change of this parameter, at least in the range which we consider.</bodyText>
<figure confidence="0.990125681818182">
English named entity German named entity
90
89
88
87
86
85
F-measure (%)
76
F-measure (%)
74
72
70
68
supervised
dev
w/ &amp;quot;Predict (previous, current, or next) words&amp;quot;
w/ &amp;quot;Predict top-2 choices&amp;quot;
w/ &amp;quot;Predict words&amp;quot; + &amp;quot;Predict top-2 choices&amp;quot;
F-measure (%)
ASO-semi
supervised
</figure>
<page confidence="0.985528">
8
</page>
<sectionHeader confidence="0.996396" genericHeader="conclusion">
8 Conclusion
</sectionHeader>
<bodyText confidence="0.999996695652174">We presented a novel semi-supervised learning method that learns the most predictive lowdimensional feature projection from unlabeled data using the structural learning algorithm SVD-ASO. On CoNLL’00 syntactic chunking and CoNLL’03 named entity chunking (English and German), the method exceeds the previous best systems (including those which rely on hand-crafted resources) by using unlabeled data as the only additional resource. The key idea is to create auxiliary problems automatically from unlabeled data so that predictive structures can be learned from that data. In practice, it is desirable to create as many auxiliary problems as possible, as long as there is some reason to believe in their relevancy to the task. This is because the risk is relatively minor while the potential gain from relevant problems is large. Moreover, the auxiliary problems used in our experiments are merely possible examples. One advantage of our approach is that one may design a variety of auxiliary problems to learn various aspects of the target problem from unlabeled data. Structural learning provides a framework for carrying out possible new ideas.</bodyText>
<sectionHeader confidence="0.998448" genericHeader="acknowledgments">
Acknowledgments
</sectionHeader>
<bodyText confidence="0.990749">Part of the work was supported by ARDA under the NIMD program PNWD-SW-6059.</bodyText>
<sectionHeader confidence="0.996322" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.992395419354839">
Rie Kubota Ando and Tong Zhang. 2004. A framework
for learning predictive structures from multiple tasks
and unlabeled data. Technical report, IBM. RC23462.
Rie Kubota Ando. 2004. Semantic lexicon construction:
Learning from unlabeled data via spectral analysis. In
Proceedings of CoNLL-2004.
Avrim Blum and Tom Mitchell. 1998. Combining la-
beled and unlabeled data with co-training. In proceed-
ings of COLT-98.
Xavier Carreras and Lluis Marquez. 2003. Phrase recog-
nition by filtering and ranking with perceptrons. In
Proceedings of RANLP-2003.
Hai Leong Chieu and Hwee Tou Ng. 2003. Named en-
tity recognition with a maximum entropy approach. In
Proceedings CoNLL-2003, pages 160–163.
Michael Collins and Yoram Singer. 1999. Unsupervised
models for named entity classification. In Proceedings
ofEMNLP/VLC’99.
Radu Florian, Abe Ittycheriah, Hongyan Jing, and Tong
Zhang. 2003. Named entity recognition through
classifier combination. In Proceedings CoNLL-2003,
pages 168–171.
Gene H. Golub and Charles F. Van Loan. 1996. Matrix
computations third edition.
Dan Klein, Joseph Smarr, Huy Nguyen, and Christo-
pher D. Manning. 2003. Named entity recognition
with character-level models. In Proceedings CoNLL-
2003, pages 188–191.
Taku Kudoh and Yuji Matsumoto. 2001. Chunking with
support vector machines. In Proceedings of NAACL
2001.
Bernard Merialdo. 1994. Tagging English text with
a probabilistic model. Computational Linguistics,
20(2):155–171.
Scott Miller, Jethran Guinness, and Alex Zamanian.
2004. Name tagging with word clusters and discrimi-
native training. In Proceedings ofHLT-NAACL-2004.
Vincent Ng and Claire Cardie. 2003. Weakly supervised
natural language learning without redundant views. In
Proceedings ofHLT-NAACL-2003.
David Pierce and Claire Cardie. 2001. Limitations of
co-training for natural language learning from large
datasets. In Proceedings ofEMNLP-2001.
Ellen Riloff and Rosie Jones. 1999. Learning dictionar-
ies for information extraction by multi-level bootstrap-
ping. In Proceedings ofAAAI-99.
Fei Sha and Fernando Pereira. 2003. Shallow pars-
ing with conditional random fields. In Proceedings of
HLT-NAACL’03.
David Yarowsky. 1995. Unsupervised word sense dis-
ambiguation rivaling supervised methods. In Proceed-
ings ofACL-95.
TongZhang and David E. Johnson. 2003. A robust risk
minimization based named entity recognition system.
In Proceedings CoNLL-2003, pages 204–207.
Tong Zhang, Fred Damerau, and David E. Johnson.
2002. Text chunking based on a generalization of Win-
now. Journal of Machine Learning Research, 2:615–
637.
Tong Zhang. 2004. Solving large scale linear prediction
problems using stochastic gradient descent algorithms.
In ICML 04, pages 919–926.
</reference>
<page confidence="0.997068">
9
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant confidence="0.822403" no="0">
<title confidence="0.999915">A High-Performance Semi-Supervised Learning Method for Text Chunking</title>
<author confidence="0.985948">Kubota</author>
<affiliation confidence="0.999981">IBM T.J. Watson Research Center</affiliation>
<address confidence="0.992277">Yorktown Heights, NY 10598, U.S.A.</address>
<abstract confidence="0.991808913043478">In machine learning, whether one can build a more accurate classifier by using data is an important issue. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. This paper presents a novel semi-supervised method that employs a learning paradigm which we call The idea is to find “what good classifiers are like” by learning from thousands of automatically generated auxiliary classification problems on unlabeled data. By doing so, the common predictive structure shared by the multiple classification problems can be discovered, which can then be used to improve performance on the target problem. The method produces performance higher than the previous best results on CoNLL’00 syntactic chunking and CoNLL’03 named entity chunking (English and German).</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Rie Kubota Ando</author>
<author>Tong Zhang</author>
</authors>
<title>A framework for learning predictive structures from multiple tasks and unlabeled data.</title>
<date>2004</date>
<tech>Technical report, IBM. RC23462.</tech>
<contexts>
<context citStr="Ando and Zhang, 2004" endWordPosition="406" position="2669" startWordPosition="403">arowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang, 2004), which seeks to discover shared predictive structures (i.e. what good classifiers for the task are like) through jointly learning multiple classification problems on unlabeled data. That is, we systematically create thousands of problems (called auxiliary problems) relevant to the target task using unlabeled data, and train classifiers from the automatically generated ‘training data’. We learn the commonality (or structure) of such many classifiers relevant to the task, and use it to improve performance on the target task. One example of such auxiliary problems for chunking tasks is to ‘mask’</context>
<context citStr="Ando and Zhang, 2004" endWordPosition="1143" position="7249" startWordPosition="1140">ructure (shared by the m problems) parameterized by the projection matrix O. In this setting, the goal of structural learning may also be regarded as learning a good feature map Ox — a low-dimensional feature vector parameterized by O. In joint ERM, we seekO(and weight vectors) that minimizes the empirical risk summed over all the problems: +r(f`)).(2) It can be shown that using joint ERM, we can reliably estimate the optimal joint parameterOas long asmis large (even when eachntis small). This is the key reason why structural learning is effective. A formal PAC-style analysis can be found in (Ando and Zhang, 2004). 2.3 Alternating structure optimization (ASO) The optimization problem (2) has a simple solution using SVD when we choose square regularization: �f=argmin f �i�n� [O,{ ^f`}]=argmin `=1 �i=1nQ L(f`(o,X`i),Y`i) 0;�fil n` 2 r (ft) = A I I wt I I 2 , where the regularization parameter A is given. For clarity, let ut be a weight vector for problemfsuch that:ut=wt+OTvt.Then, (2) becomes the minimization of the joint empirical risk written as: +AJJu`—OTv`JJ22�.(3) This minimization can be approximately solved by the following alternating optimization procedure: •Fix(O,{vt}), and findmpredictors{ut}t</context>
<context citStr="Ando and Zhang, 2004" endWordPosition="1378" position="8729" startWordPosition="1375">ples all the problems. Its solution is given by the SVD (singular value decomposition) of the predictor matrix U = [u 1, ... , ur,, ] : the rows of the optimum O are given by the most significant left singular vectors1 of U. Intuitively, the optimum O captures the maximal commonality of the m predictors (each derived from ut). These m predictors are updated using the new structure matrix O in the next iteration, and the process repeats. Figure 1 summarizes the algorithm sketched above, which we call the alternating structure optimization (ASO) algorithm. The formal derivation can be found in (Ando and Zhang, 2004). 2.4 Comparison with existing techniques It is important to note that this SVD-based ASO (SVD-ASO) procedure is fundamentally different from the usual principle component analysis (PCA), which can be regarded as dimension reduction in the data spaceX. By contrast, the dimension reduction performed in the SVD-ASO algorithm is on the predictor space (a set of predictors). This is possible because we observe multiple predictors from multiple learning tasks. If we regard the observed predictors as sample points of the predictor distribution in 1In other words, O is computed so that the best low-r</context>
<context citStr="Ando and Zhang, 2004" endWordPosition="2617" position="16534" startWordPosition="2614"> Sections 5 and 6. 4.1 Extension of the basic SVD-ASO algorithm In our experiments, we use an extension of SVDASO. In NLP applications, features have natural grouping according to their types/origins such as ‘current words’, ‘parts-of-speech on the right’, and so forth. It is desirable to perform a localized optimization for each of such natural feature groups. Hence, we associate each feature group with a submatrix of structure matrixO. The optimization algorithm for this extension is essentially the same as SVD-ASO in Figure 1, but with the SVD step performed separately for each group. See (Ando and Zhang, 2004) for the precise formulation. In addition, we regularize only those components of wt which correspond to the non-negative part of ut. The motivation is that positive weights are usually directly related to the target concept, while negative ones often yield much less specific information representing ‘the others’. The resulting extension, in effect, only uses the positive components ofUin the SVD computation. 4.2 Chunking algorithm, loss function, training algorithm, and parameter settings As is commonly done, we encode chunk information into word tags to cast the chunking problem to that of s</context>
</contexts>
<marker>Ando, Zhang, 2004</marker>
<rawString>Rie Kubota Ando and Tong Zhang. 2004. A framework for learning predictive structures from multiple tasks and unlabeled data. Technical report, IBM. RC23462.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rie Kubota Ando</author>
</authors>
<title>Semantic lexicon construction: Learning from unlabeled data via spectral analysis.</title>
<date>2004</date>
<booktitle>In Proceedings of CoNLL-2004.</booktitle>
<contexts>
<context citStr="Ando (2004)" endWordPosition="1595" position="10112" startWordPosition="1594">g Structure Optimization (SVD-ASO) Algorithm the predictor space (corrupted with estimation error, or noise), then SVD-ASO can be interpreted as finding the “principle components” (or commonality) of these predictors (i.e., “what good predictors are like”). Consequently the method directly looks for low-dimensional structures with the highest predictive power. By contrast, the principle components of input data in the data space (which PCA seeks) may not necessarily have the highest predictive power. The above argument also applies to the feature generation from unlabeled data using LSI (e.g. Ando (2004)). Similarly, Miller et al. (2004) used word-cluster memberships induced from an unannotated corpus as features for named entity chunking. Our work is related but more general, because we can explore additional information from unlabeled data using many different auxiliary problems. Since Miller et al. (2004)’s experiments used a proprietary corpus, direct performance comparison is not possible. However, our preliminary implementation of the word clustering approach did not provide any improvement on our tasks. As we will see, our starting performance is already high. Therefore the additional </context>
</contexts>
<marker>Ando, 2004</marker>
<rawString>Rie Kubota Ando. 2004. Semantic lexicon construction: Learning from unlabeled data via spectral analysis. In Proceedings of CoNLL-2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Avrim Blum</author>
<author>Tom Mitchell</author>
</authors>
<title>Combining labeled and unlabeled data with co-training.</title>
<date>1998</date>
<booktitle>In proceedings of COLT-98.</booktitle>
<contexts>
<context citStr="Blum and Mitchell, 1998" endWordPosition="245" position="1627" startWordPosition="242">oNLL’00 syntactic chunking and CoNLL’03 named entity chunking (English and German). 1 Introduction In supervised learning applications, one can often find a large amount of unlabeled data without difficulty, while labeled data are costly to obtain. Therefore, a natural question is whether we can use unlabeled data to build a more accurate classifier, given the same amount of labeled data. This problem is often referred to as semi-supervised learning. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the</context>
<context citStr="Blum and Mitchell, 1998" endWordPosition="2947" position="18648" startWordPosition="2944">training ofmauxiliary predictors on the unlabeled data (computingUin Figure 1). Fixing the number of iterations to a constant, it runs in linear tomand the number of unlabeled instances and takes hours in our settings that use more than 20 million unlabeled instances. 4.3 Baseline algorithms Supervised classifier For comparison, we train a classifier using the same features and algorithm, but without unlabeled data (O=0in effect). Co-training We test co-training since our idea of partially-supervised auxiliary problems is motivated by co-training. Our implementation follows the original work (Blum and Mitchell, 1998). The two (or more) classifiers (with distinct feature maps) are trained with labeled data. We maintain a pool ofq unlabeled instances by random selection. The classifier proposes labels for the instances in this pool. We choosesinstances for each classifier with high confidence while preserving the class distribution observed in the initial labeled data, and add them to the labeled data. The process is then repeated. We exploreq=50K, 100K,s=50,100,500,1K, and commonly-used feature splits: ‘current vs. context’ and ‘current+left-context vs. current+right-context’. Self-training Single-view boo</context>
</contexts>
<marker>Blum, Mitchell, 1998</marker>
<rawString>Avrim Blum and Tom Mitchell. 1998. Combining labeled and unlabeled data with co-training. In proceedings of COLT-98.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xavier Carreras</author>
<author>Lluis Marquez</author>
</authors>
<title>Phrase recognition by filtering and ranking with perceptrons.</title>
<date>2003</date>
<booktitle>In Proceedings of RANLP-2003.</booktitle>
<contexts>
<context citStr="Carreras and Marquez, 2003" endWordPosition="4532" position="28945" startWordPosition="4529"> rare. An exception is the use of output from a grammar-based full parser as features in ZDJ02+, which our system does not use. KM01 and CM03 boost performance by classifier combinations. SP03 trains conditional random fields for NP 7 all NP description ASO-semi 94.39 94.70 +unlabeled data KM01 93.91 94.39 SVM combination CM03 93.74 94.41 perceptron in two layers SP03 – 94.38 conditional random fields ZDJ02 93.57 93.89 generalized Winnow ZDJ02+ 94.17 94.38 +full parser output Figure 8: Syntactic chunking F-measure. Comparison with previous best results: KM01 (Kudoh and Matsumoto, 2001), CM03 (Carreras and Marquez, 2003), SP03 (Sha and Pereira, 2003), ZDJ02 (Zhang et al., 2002). (noun phrases) only. ASO-semi produces higher NP chunking performance than the others. 7 Empirical Analysis 7.1 Effectiveness of auxiliary problems Figure 9: Named entity F-measure produced by using individual types of auxiliary problems. Trained with the entire training sets and tested on the test sets. Figure 9 shows F-measure obtained by computing O from individual types of auxiliary problems on named entity chunking. Both types – “Predict words” and “Predict top-2 choices of the classifier” – are useful, producing significant perf</context>
</contexts>
<marker>Carreras, Marquez, 2003</marker>
<rawString>Xavier Carreras and Lluis Marquez. 2003. Phrase recognition by filtering and ranking with perceptrons. In Proceedings of RANLP-2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Hai Leong Chieu</author>
<author>Hwee Tou Ng</author>
</authors>
<title>Named entity recognition with a maximum entropy approach.</title>
<date>2003</date>
<booktitle>In Proceedings CoNLL-2003,</booktitle>
<pages>160--163</pages>
<contexts>
<context citStr="Chieu and Ng, 2003" endWordPosition="4055" position="25901" startWordPosition="4052"> data manually annotated with finer-grained named entities (FIJZ03); and rule-based post processing (KSNM03). Hence, we feel that our results, obtained by using unlabeled data as the only additional resource, are encouraging. System Eng. Ger. Additional resources ASO-semi 89.31 75.27 unlabeled data FIJZ03 88.76 72.41 gazetteers; 2M-word labeled data (English) CN03 88.31 65.67 gazetteers (English); (also very elaborated features) KSNM03 86.31 71.90 rule-based post processing Figure 5: Named entity chunking. F-measure on the test sets. Previous best results: FIJZ03 (Florian et al., 2003), CN03 (Chieu and Ng, 2003), KSNM03 (Klein et al., 2003). 6 Syntactic Chunking Experiments Next, we report syntactic chunking performance on the CoNLL’00 shared-task5 corpus. The training and test data sets consist of the Wall Street Journal corpus (WSJ) sections 15–18 (212K words) and section 20, respectively. They are annotated with eleven types of syntactic chunks such as noun phrases. We 4Whether or not gazetteers are useful depends on their coverage. A number of top-performing systems used their own gazetteers in addition to the organizer’s gazetteers and reported significant performance improvements (e.g., FIJZ03,</context>
</contexts>
<marker>Chieu, Ng, 2003</marker>
<rawString>Hai Leong Chieu and Hwee Tou Ng. 2003. Named entity recognition with a maximum entropy approach. In Proceedings CoNLL-2003, pages 160–163.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
<author>Yoram Singer</author>
</authors>
<title>Unsupervised models for named entity classification.</title>
<date>1999</date>
<booktitle>In Proceedings ofEMNLP/VLC’99.</booktitle>
<contexts>
<context citStr="Collins and Singer (1999)" endWordPosition="314" position="2089" startWordPosition="311">gh a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang, 2004), which seeks to dis</context>
</contexts>
<marker>Collins, Singer, 1999</marker>
<rawString>Michael Collins and Yoram Singer. 1999. Unsupervised models for named entity classification. In Proceedings ofEMNLP/VLC’99.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Radu Florian</author>
<author>Abe Ittycheriah</author>
<author>Hongyan Jing</author>
<author>Tong Zhang</author>
</authors>
<title>Named entity recognition through classifier combination.</title>
<date>2003</date>
<booktitle>In Proceedings CoNLL-2003,</booktitle>
<pages>168--171</pages>
<contexts>
<context citStr="Florian et al., 2003" endWordPosition="4050" position="25874" startWordPosition="4047"> (2 million words) of labeled data manually annotated with finer-grained named entities (FIJZ03); and rule-based post processing (KSNM03). Hence, we feel that our results, obtained by using unlabeled data as the only additional resource, are encouraging. System Eng. Ger. Additional resources ASO-semi 89.31 75.27 unlabeled data FIJZ03 88.76 72.41 gazetteers; 2M-word labeled data (English) CN03 88.31 65.67 gazetteers (English); (also very elaborated features) KSNM03 86.31 71.90 rule-based post processing Figure 5: Named entity chunking. F-measure on the test sets. Previous best results: FIJZ03 (Florian et al., 2003), CN03 (Chieu and Ng, 2003), KSNM03 (Klein et al., 2003). 6 Syntactic Chunking Experiments Next, we report syntactic chunking performance on the CoNLL’00 shared-task5 corpus. The training and test data sets consist of the Wall Street Journal corpus (WSJ) sections 15–18 (212K words) and section 20, respectively. They are annotated with eleven types of syntactic chunks such as noun phrases. We 4Whether or not gazetteers are useful depends on their coverage. A number of top-performing systems used their own gazetteers in addition to the organizer’s gazetteers and reported significant performance </context>
</contexts>
<marker>Florian, Ittycheriah, Jing, Zhang, 2003</marker>
<rawString>Radu Florian, Abe Ittycheriah, Hongyan Jing, and Tong Zhang. 2003. Named entity recognition through classifier combination. In Proceedings CoNLL-2003, pages 168–171.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Gene H Golub</author>
<author>Charles F Van Loan</author>
</authors>
<date>1996</date>
<note>Matrix computations third edition.</note>
<marker>Golub, Van Loan, 1996</marker>
<rawString>Gene H. Golub and Charles F. Van Loan. 1996. Matrix computations third edition.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Joseph Smarr</author>
<author>Huy Nguyen</author>
<author>Christopher D Manning</author>
</authors>
<title>Named entity recognition with character-level models.</title>
<date>2003</date>
<booktitle>In Proceedings CoNLL2003,</booktitle>
<pages>188--191</pages>
<contexts>
<context citStr="Klein et al., 2003" endWordPosition="4060" position="25930" startWordPosition="4057"> finer-grained named entities (FIJZ03); and rule-based post processing (KSNM03). Hence, we feel that our results, obtained by using unlabeled data as the only additional resource, are encouraging. System Eng. Ger. Additional resources ASO-semi 89.31 75.27 unlabeled data FIJZ03 88.76 72.41 gazetteers; 2M-word labeled data (English) CN03 88.31 65.67 gazetteers (English); (also very elaborated features) KSNM03 86.31 71.90 rule-based post processing Figure 5: Named entity chunking. F-measure on the test sets. Previous best results: FIJZ03 (Florian et al., 2003), CN03 (Chieu and Ng, 2003), KSNM03 (Klein et al., 2003). 6 Syntactic Chunking Experiments Next, we report syntactic chunking performance on the CoNLL’00 shared-task5 corpus. The training and test data sets consist of the Wall Street Journal corpus (WSJ) sections 15–18 (212K words) and section 20, respectively. They are annotated with eleven types of syntactic chunks such as noun phrases. We 4Whether or not gazetteers are useful depends on their coverage. A number of top-performing systems used their own gazetteers in addition to the organizer’s gazetteers and reported significant performance improvements (e.g., FIJZ03, CN03, and ZJ03). 5http://cnt</context>
</contexts>
<marker>Klein, Smarr, Nguyen, Manning, 2003</marker>
<rawString>Dan Klein, Joseph Smarr, Huy Nguyen, and Christopher D. Manning. 2003. Named entity recognition with character-level models. In Proceedings CoNLL2003, pages 188–191.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taku Kudoh</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Chunking with support vector machines.</title>
<date>2001</date>
<booktitle>In Proceedings of NAACL</booktitle>
<contexts>
<context citStr="Kudoh and Matsumoto (2001)" endWordPosition="891" position="5715" startWordPosition="887">e train one predictor per class and choose the class with the highest output value. A frequently used method for finding an accurate predictor�fis regularized empirical risk minimization (ERM), which minimizes an empirical loss of the predictor (with regularization) on thentraining examples{(Xi;Yi)}: L(f(Xi);Yi)+r(f)): L(.) is a loss function to quantify the difference between the prediction f (Xi) and the true output Yi, andr(.)is a regularization term to control the model complexity. ERM-based methods for discriminative learning are known to be effective for NLP tasks such as chunking (e.g. Kudoh and Matsumoto (2001), Zhang and Johnson (2003)). 2.2 Linear model for structural learning We present a linear prediction model for structural learning, which extends the traditional model to multiple problems. Specifically, we assume that there exists a low-dimensional predictive structure shared by multiple prediction problems. We seek to discover this structure through joint empirical risk minimization over the multiple problems. Consider m problems indexed by ` E { 1 each with nt samples (Xti; Yt) indexed by i E {1; ::: ; nt}. In our joint linear model, a predictor for problem ` takes the following form ft(O;x</context>
<context citStr="Kudoh and Matsumoto, 2001" endWordPosition="4527" position="28910" startWordPosition="4524">external resources on this task is rare. An exception is the use of output from a grammar-based full parser as features in ZDJ02+, which our system does not use. KM01 and CM03 boost performance by classifier combinations. SP03 trains conditional random fields for NP 7 all NP description ASO-semi 94.39 94.70 +unlabeled data KM01 93.91 94.39 SVM combination CM03 93.74 94.41 perceptron in two layers SP03 – 94.38 conditional random fields ZDJ02 93.57 93.89 generalized Winnow ZDJ02+ 94.17 94.38 +full parser output Figure 8: Syntactic chunking F-measure. Comparison with previous best results: KM01 (Kudoh and Matsumoto, 2001), CM03 (Carreras and Marquez, 2003), SP03 (Sha and Pereira, 2003), ZDJ02 (Zhang et al., 2002). (noun phrases) only. ASO-semi produces higher NP chunking performance than the others. 7 Empirical Analysis 7.1 Effectiveness of auxiliary problems Figure 9: Named entity F-measure produced by using individual types of auxiliary problems. Trained with the entire training sets and tested on the test sets. Figure 9 shows F-measure obtained by computing O from individual types of auxiliary problems on named entity chunking. Both types – “Predict words” and “Predict top-2 choices of the classifier” – are</context>
</contexts>
<marker>Kudoh, Matsumoto, 2001</marker>
<rawString>Taku Kudoh and Yuji Matsumoto. 2001. Chunking with support vector machines. In Proceedings of NAACL 2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Bernard Merialdo</author>
</authors>
<title>Tagging English text with a probabilistic model.</title>
<date>1994</date>
<journal>Computational Linguistics,</journal>
<volume>20</volume>
<issue>2</issue>
<contexts>
<context citStr="Merialdo (1994)" endWordPosition="295" position="1971" startWordPosition="294">given the same amount of labeled data. This problem is often referred to as semi-supervised learning. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-sup</context>
</contexts>
<marker>Merialdo, 1994</marker>
<rawString>Bernard Merialdo. 1994. Tagging English text with a probabilistic model. Computational Linguistics, 20(2):155–171.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Scott Miller</author>
<author>Jethran Guinness</author>
<author>Alex Zamanian</author>
</authors>
<title>Name tagging with word clusters and discriminative training.</title>
<date>2004</date>
<booktitle>In Proceedings ofHLT-NAACL-2004.</booktitle>
<contexts>
<context citStr="Miller et al. (2004)" endWordPosition="1600" position="10146" startWordPosition="1597">(SVD-ASO) Algorithm the predictor space (corrupted with estimation error, or noise), then SVD-ASO can be interpreted as finding the “principle components” (or commonality) of these predictors (i.e., “what good predictors are like”). Consequently the method directly looks for low-dimensional structures with the highest predictive power. By contrast, the principle components of input data in the data space (which PCA seeks) may not necessarily have the highest predictive power. The above argument also applies to the feature generation from unlabeled data using LSI (e.g. Ando (2004)). Similarly, Miller et al. (2004) used word-cluster memberships induced from an unannotated corpus as features for named entity chunking. Our work is related but more general, because we can explore additional information from unlabeled data using many different auxiliary problems. Since Miller et al. (2004)’s experiments used a proprietary corpus, direct performance comparison is not possible. However, our preliminary implementation of the word clustering approach did not provide any improvement on our tasks. As we will see, our starting performance is already high. Therefore the additional information discovered by SVD-ASO </context>
</contexts>
<marker>Miller, Guinness, Zamanian, 2004</marker>
<rawString>Scott Miller, Jethran Guinness, and Alex Zamanian. 2004. Name tagging with word clusters and discriminative training. In Proceedings ofHLT-NAACL-2004.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Vincent Ng</author>
<author>Claire Cardie</author>
</authors>
<title>Weakly supervised natural language learning without redundant views.</title>
<date>2003</date>
<booktitle>In Proceedings ofHLT-NAACL-2003.</booktitle>
<contexts>
<context citStr="Ng and Cardie (2003)" endWordPosition="3116" position="19818" startWordPosition="3113">rent+right-context’. Self-training Single-view bootstrapping is sometimes called self-training. We test the basic selftraining2, which replaces multiple classifiers in the co-training procedure with a single classifier that employs all the features. co/self-training oracle performance To avoid the issue of parameter selection for the co- and selftraining, we report their best possible oracle performance, which is the best F-measure number among all the co- and self-training parameter settings including the choice of the number of iterations. 2We also tested “self-training with bagging”, which Ng and Cardie (2003) used for co-reference resolution. We omit results since it did not produce better performance than the supervised baseline. 5 words, parts-of-speech (POS), character types, 4 characters at the beginning/ending in a 5-word window. words in a 3-syntactic chunk window. labels assigned to two words on the left. bi-grams of the current word and the label on the left. labels assigned to previous occurrences of the current word. Figure 2: Feature types for named entity chunking. POS and syntactic chunk information is provided by the organizer. 5 Named Entity Chunking Experiments We report named enti</context>
</contexts>
<marker>Ng, Cardie, 2003</marker>
<rawString>Vincent Ng and Claire Cardie. 2003. Weakly supervised natural language learning without redundant views. In Proceedings ofHLT-NAACL-2003.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Pierce</author>
<author>Claire Cardie</author>
</authors>
<title>Limitations of co-training for natural language learning from large datasets.</title>
<date>2001</date>
<booktitle>In Proceedings ofEMNLP-2001.</booktitle>
<contexts>
<context citStr="Pierce and Cardie, 2001" endWordPosition="259" position="1731" startWordPosition="256">pervised learning applications, one can often find a large amount of unlabeled data without difficulty, while labeled data are costly to obtain. Therefore, a natural question is whether we can use unlabeled data to build a more accurate classifier, given the same amount of labeled data. This problem is often referred to as semi-supervised learning. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a genera</context>
</contexts>
<marker>Pierce, Cardie, 2001</marker>
<rawString>David Pierce and Claire Cardie. 2001. Limitations of co-training for natural language learning from large datasets. In Proceedings ofEMNLP-2001.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ellen Riloff</author>
<author>Rosie Jones</author>
</authors>
<title>Learning dictionaries for information extraction by multi-level bootstrapping.</title>
<date>1999</date>
<booktitle>In Proceedings ofAAAI-99.</booktitle>
<contexts>
<context citStr="Riloff and Jones (1999)" endWordPosition="318" position="2114" startWordPosition="315">sed methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang, 2004), which seeks to discover shared predictive s</context>
</contexts>
<marker>Riloff, Jones, 1999</marker>
<rawString>Ellen Riloff and Rosie Jones. 1999. Learning dictionaries for information extraction by multi-level bootstrapping. In Proceedings ofAAAI-99.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Fei Sha</author>
<author>Fernando Pereira</author>
</authors>
<title>Shallow parsing with conditional random fields.</title>
<date>2003</date>
<booktitle>In Proceedings of HLT-NAACL’03.</booktitle>
<contexts>
<context citStr="Sha and Pereira, 2003" endWordPosition="4537" position="28975" startWordPosition="4534">utput from a grammar-based full parser as features in ZDJ02+, which our system does not use. KM01 and CM03 boost performance by classifier combinations. SP03 trains conditional random fields for NP 7 all NP description ASO-semi 94.39 94.70 +unlabeled data KM01 93.91 94.39 SVM combination CM03 93.74 94.41 perceptron in two layers SP03 – 94.38 conditional random fields ZDJ02 93.57 93.89 generalized Winnow ZDJ02+ 94.17 94.38 +full parser output Figure 8: Syntactic chunking F-measure. Comparison with previous best results: KM01 (Kudoh and Matsumoto, 2001), CM03 (Carreras and Marquez, 2003), SP03 (Sha and Pereira, 2003), ZDJ02 (Zhang et al., 2002). (noun phrases) only. ASO-semi produces higher NP chunking performance than the others. 7 Empirical Analysis 7.1 Effectiveness of auxiliary problems Figure 9: Named entity F-measure produced by using individual types of auxiliary problems. Trained with the entire training sets and tested on the test sets. Figure 9 shows F-measure obtained by computing O from individual types of auxiliary problems on named entity chunking. Both types – “Predict words” and “Predict top-2 choices of the classifier” – are useful, producing significant performance improvements over the </context>
</contexts>
<marker>Sha, Pereira, 2003</marker>
<rawString>Fei Sha and Fernando Pereira. 2003. Shallow parsing with conditional random fields. In Proceedings of HLT-NAACL’03.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Yarowsky</author>
</authors>
<title>Unsupervised word sense disambiguation rivaling supervised methods.</title>
<date>1995</date>
<booktitle>In Proceedings ofACL-95.</booktitle>
<contexts>
<context citStr="Yarowsky (1995)" endWordPosition="310" position="2062" startWordPosition="309"> learning. Although a number of semi-supervised methods have been proposed, their effectiveness on NLP tasks is not always clear. For example, co-training (Blum and Mitchell, 1998) automatically bootstraps labels, and such labels are not necessarily reliable (Pierce and Cardie, 2001). A related idea is to use Expectation Maximization (EM) to impute labels. Although useful under some circumstances, when a relatively large amount of labeled data is available, the procedure often degrades performance (e.g. Merialdo (1994)). A number of bootstrapping methods have been proposed for NLP tasks (e.g. Yarowsky (1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang</context>
</contexts>
<marker>Yarowsky, 1995</marker>
<rawString>David Yarowsky. 1995. Unsupervised word sense disambiguation rivaling supervised methods. In Proceedings ofACL-95.</rawString>
</citation>
<citation valid="true">
<authors>
<author>TongZhang</author>
<author>David E Johnson</author>
</authors>
<title>A robust risk minimization based named entity recognition system.</title>
<date>2003</date>
<booktitle>In Proceedings CoNLL-2003,</booktitle>
<pages>204--207</pages>
<marker>TongZhang, Johnson, 2003</marker>
<rawString>TongZhang and David E. Johnson. 2003. A robust risk minimization based named entity recognition system. In Proceedings CoNLL-2003, pages 204–207.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tong Zhang</author>
<author>Fred Damerau</author>
<author>David E Johnson</author>
</authors>
<title>Text chunking based on a generalization of Winnow.</title>
<date>2002</date>
<journal>Journal of Machine Learning Research,</journal>
<volume>2</volume>
<pages>637</pages>
<contexts>
<context citStr="Zhang et al., 2002" endWordPosition="4274" position="27321" startWordPosition="4271"> the two words on the left and their bi-grams. bi-grams of the current word and two labels on the left. Figure 6: Feature types for syntactic chunking. POS information is provided by the organizer. prec. recall F0=1 supervised 93.83 93.37 93.60 ASO-semi 94.57 94.20 94.39 (+0.79) co/self oracle 93.76 93.56 93.66 (+0.06) Figure 7: Syntactic chunking results. use the WSJ articles in 1991 (15 million words) from the TREC corpus as the unlabeled data. 6.1 Features and auxiliary problems Our feature representation is a slight modification of a simpler configuration (without linguistic features) in (Zhang et al., 2002), as shown in Figure 6. We use the POS information provided by the organizer. The types of auxiliary problems are the same as in the named entity experiments. For word predictions, we exclude instances of punctuation symbols. 6.2 Syntactic chunking results As shown in Figure 7, ASO-semi improves both precision and recall over the supervised baseline. It achieves 94.39% in F-measure, which outperforms the supervised baseline by 0.79%. Co- and selftraining again slightly improve recall but slightly degrade precision at their oracle performance, which demonstrates that it is not easy to benefit f</context>
<context citStr="Zhang et al., 2002" endWordPosition="4542" position="29003" startWordPosition="4539"> parser as features in ZDJ02+, which our system does not use. KM01 and CM03 boost performance by classifier combinations. SP03 trains conditional random fields for NP 7 all NP description ASO-semi 94.39 94.70 +unlabeled data KM01 93.91 94.39 SVM combination CM03 93.74 94.41 perceptron in two layers SP03 – 94.38 conditional random fields ZDJ02 93.57 93.89 generalized Winnow ZDJ02+ 94.17 94.38 +full parser output Figure 8: Syntactic chunking F-measure. Comparison with previous best results: KM01 (Kudoh and Matsumoto, 2001), CM03 (Carreras and Marquez, 2003), SP03 (Sha and Pereira, 2003), ZDJ02 (Zhang et al., 2002). (noun phrases) only. ASO-semi produces higher NP chunking performance than the others. 7 Empirical Analysis 7.1 Effectiveness of auxiliary problems Figure 9: Named entity F-measure produced by using individual types of auxiliary problems. Trained with the entire training sets and tested on the test sets. Figure 9 shows F-measure obtained by computing O from individual types of auxiliary problems on named entity chunking. Both types – “Predict words” and “Predict top-2 choices of the classifier” – are useful, producing significant performance improvements over the supervised baseline. The bes</context>
</contexts>
<marker>Zhang, Damerau, Johnson, 2002</marker>
<rawString>Tong Zhang, Fred Damerau, and David E. Johnson. 2002. Text chunking based on a generalization of Winnow. Journal of Machine Learning Research, 2:615– 637.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Tong Zhang</author>
</authors>
<title>Solving large scale linear prediction problems using stochastic gradient descent algorithms.</title>
<date>2004</date>
<booktitle>In ICML 04,</booktitle>
<pages>919--926</pages>
<contexts>
<context citStr="Zhang, 2004" endWordPosition="406" position="2669" startWordPosition="405">1995), Collins and Singer (1999), Riloff and Jones (1999)). But these typically assume a very small amount of labeled data and have not been shown to improve state-of-the-art performance when a large amount of labeled data is available. Our goal has been to develop a general learning framework for reliably using unlabeled data to improve performance irrespective of the amount of labeled data available. It is exactly this important and difficult problem that we tackle here. This paper presents a novel semi-supervised method that employs a learning framework called structural learning (Ando and Zhang, 2004), which seeks to discover shared predictive structures (i.e. what good classifiers for the task are like) through jointly learning multiple classification problems on unlabeled data. That is, we systematically create thousands of problems (called auxiliary problems) relevant to the target task using unlabeled data, and train classifiers from the automatically generated ‘training data’. We learn the commonality (or structure) of such many classifiers relevant to the task, and use it to improve performance on the target task. One example of such auxiliary problems for chunking tasks is to ‘mask’</context>
<context citStr="Zhang, 2004" endWordPosition="1143" position="7249" startWordPosition="1142">shared by the m problems) parameterized by the projection matrix O. In this setting, the goal of structural learning may also be regarded as learning a good feature map Ox — a low-dimensional feature vector parameterized by O. In joint ERM, we seekO(and weight vectors) that minimizes the empirical risk summed over all the problems: +r(f`)).(2) It can be shown that using joint ERM, we can reliably estimate the optimal joint parameterOas long asmis large (even when eachntis small). This is the key reason why structural learning is effective. A formal PAC-style analysis can be found in (Ando and Zhang, 2004). 2.3 Alternating structure optimization (ASO) The optimization problem (2) has a simple solution using SVD when we choose square regularization: �f=argmin f �i�n� [O,{ ^f`}]=argmin `=1 �i=1nQ L(f`(o,X`i),Y`i) 0;�fil n` 2 r (ft) = A I I wt I I 2 , where the regularization parameter A is given. For clarity, let ut be a weight vector for problemfsuch that:ut=wt+OTvt.Then, (2) becomes the minimization of the joint empirical risk written as: +AJJu`—OTv`JJ22�.(3) This minimization can be approximately solved by the following alternating optimization procedure: •Fix(O,{vt}), and findmpredictors{ut}t</context>
<context citStr="Zhang, 2004" endWordPosition="1378" position="8729" startWordPosition="1377">the problems. Its solution is given by the SVD (singular value decomposition) of the predictor matrix U = [u 1, ... , ur,, ] : the rows of the optimum O are given by the most significant left singular vectors1 of U. Intuitively, the optimum O captures the maximal commonality of the m predictors (each derived from ut). These m predictors are updated using the new structure matrix O in the next iteration, and the process repeats. Figure 1 summarizes the algorithm sketched above, which we call the alternating structure optimization (ASO) algorithm. The formal derivation can be found in (Ando and Zhang, 2004). 2.4 Comparison with existing techniques It is important to note that this SVD-based ASO (SVD-ASO) procedure is fundamentally different from the usual principle component analysis (PCA), which can be regarded as dimension reduction in the data spaceX. By contrast, the dimension reduction performed in the SVD-ASO algorithm is on the predictor space (a set of predictors). This is possible because we observe multiple predictors from multiple learning tasks. If we regard the observed predictors as sample points of the predictor distribution in 1In other words, O is computed so that the best low-r</context>
<context citStr="Zhang, 2004" endWordPosition="2617" position="16534" startWordPosition="2616"> 5 and 6. 4.1 Extension of the basic SVD-ASO algorithm In our experiments, we use an extension of SVDASO. In NLP applications, features have natural grouping according to their types/origins such as ‘current words’, ‘parts-of-speech on the right’, and so forth. It is desirable to perform a localized optimization for each of such natural feature groups. Hence, we associate each feature group with a submatrix of structure matrixO. The optimization algorithm for this extension is essentially the same as SVD-ASO in Figure 1, but with the SVD step performed separately for each group. See (Ando and Zhang, 2004) for the precise formulation. In addition, we regularize only those components of wt which correspond to the non-negative part of ut. The motivation is that positive weights are usually directly related to the target concept, while negative ones often yield much less specific information representing ‘the others’. The resulting extension, in effect, only uses the positive components ofUin the SVD computation. 4.2 Chunking algorithm, loss function, training algorithm, and parameter settings As is commonly done, we encode chunk information into word tags to cast the chunking problem to that of s</context>
<context citStr="Zhang, 2004" endWordPosition="2815" position="17785" startWordPosition="2814">rbistyle decoding to choose the word tag sequence that maximizes the sum of tagging confidence values. In all settings (including baseline methods), the loss function is a modification of the Huber’s robust loss for regression: L(p, y) = max (0,1 — py)2 if py &gt; —1; and —4py otherwise; with square regularization (A=10-4). One may select other loss functions such as SVM or logistic regression. The specific choice is not important for the purpose of this paper. The training algorithm is stochastic gradient descent, which is argued to perform well for regularized convex ERM learning formulations (Zhang, 2004). As we will show in Section 7.3, our formulation is relatively insensitive to the change inh(rowdimension of the structure matrix). We fixh(for each feature group) to 50, and use it in all settings. The most time-consuming process is the training ofmauxiliary predictors on the unlabeled data (computingUin Figure 1). Fixing the number of iterations to a constant, it runs in linear tomand the number of unlabeled instances and takes hours in our settings that use more than 20 million unlabeled instances. 4.3 Baseline algorithms Supervised classifier For comparison, we train a classifier using th</context>
</contexts>
<marker>Zhang, 2004</marker>
<rawString>Tong Zhang. 2004. Solving large scale linear prediction problems using stochastic gradient descent algorithms. In ICML 04, pages 919–926.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>