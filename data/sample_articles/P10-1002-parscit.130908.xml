<?xml version="1.0" encoding="UTF-8"?>
<algorithms version="110505">
<algorithm name="SectLabel" version="110505">
<variant confidence="0.000010" no="0">
<title confidence="0.984238">
Dependency Parsing and Projection Based on Word-Pair Classification
</title>
<author confidence="0.993306">
Wenbin Jiang and Qun Liu
</author>
<affiliation confidence="0.985917666666667">
Key Laboratory of Intelligent Information Processing
Institute of Computing Technology
Chinese Academy of Sciences
</affiliation>
<address confidence="0.734889">
P.O. Box 2704, Beijing 100190, China
</address>
<email confidence="0.996255">
{jiangwenbin, liuqun}@ict.ac.cn
</email>
<sectionHeader confidence="0.997307" genericHeader="abstract">
Abstract
</sectionHeader>
<bodyText confidence="0.999083">In this paper we describe an intuitionistic method for dependency parsing, where a classifier is used to determine whether a pair of words forms a dependency edge. And we also propose an effective strategy for dependency projection, where the dependency relationships of the word pairs in the source language are projected to the word pairs of the target language, leading to a set of classification instances rather than a complete tree. Experiments show that, the classifier trained on the projected classification instances significantly outperforms previous projected dependency parsers. More importantly, when this classifier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline.</bodyText>
<sectionHeader confidence="0.999517" genericHeader="introduction">
1 Introduction
</sectionHeader>
<bodyText confidence="0.999897583333334">Supervised dependency parsing achieves the stateof-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build humanannotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some hand-designed rules to handle language heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with quasi-synchronous grammar features. Jiang and Liu (2009) resort to a dynamic programming procedure to search for a completed projected tree. However, these strategies are all confined to the same category that dependency projection must produce completed projected trees. Because of the free translation, the syntactic isomerism between languages and word alignment errors, it would be strained to completely project the dependency structure from one language to another. We propose an effective method for dependency projection, which does not have to produce complete projected trees. Given a wordaligned bilingual corpus with source language sentences parsed, the dependency relationships of the word pairs in the source language are projected to the word pairs of the target language. A dependency relationship is a boolean value that represents whether this word pair forms a dependency edge. Thus a set of classification instances are obtained. Meanwhile, we propose an intuitionistic model for dependency parsing, which uses a classifier to determine whether a pair of words form a dependency edge. The classifier can then be trained on the projected classification instance set, so as to build a projected dependency parser without the need of complete projected trees.</bodyText>
<page confidence="0.984661">
12
</page>
<note confidence="0.9875765">
Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 12–20,
Uppsala, Sweden, 11-16 July 2010. c�2010 Association for Computational Linguistics
</note>
<figureCaption confidence="0.999904">
Figure 1: Illegal (a) and incomplete (b) dependency tree produced by the simple-collection method.
</figureCaption>
<bodyText confidence="0.999995769230769">Experimental results show that, the classifier trained on the projected classification instances significantly outperforms the projected dependency parsers in previous works. The classifier trained on the Chinese projected classification instances achieves a precision of 58.59% on the CTB standard test set. More importantly, when this classifier is integrated into a 2nd-ordered maximum spanning tree (MST) dependency parser (McDonald and Pereira, 2006) in a weighted average manner, significant improvement is obtained over the MST baselines. For the 2nd-order MST parser trained on Penn Chinese Treebank (CTB) 5.0, the classifier give an precision increment of 0.5 points. Especially for the parser trained on the smaller CTB 1.0, more than 1 points precision increment is obtained. In the rest of this paper, we first describe the word-pair classification model for dependency parsing (section 2) and the generation method of projected classification instances (section 3). Then we describe an application of the projected parser: boosting a state-of-the-art 2nd-ordered MST parser (section 4). After the comparisons with previous works on dependency parsing and projection, we finally five the experimental results.</bodyText>
<sectionHeader confidence="0.990793" genericHeader="method">
2 Word-Pair Classification Model
</sectionHeader>
<subsectionHeader confidence="0.990788">
2.1 Model Definition
</subsectionHeader>
<bodyText confidence="0.995638909090909">Following (McDonald et al., 2005a), x is used to denote the sentence to be parsed, and xi to denote the i-th word in the sentence. y denotes the dependency tree for sentence x, and (i, j) E y represents a dependency edge from word xi to word xj, where xi is the parent of xj. The task of the word-pair classification model is to determine whether any candidate word pair, xi and xj s.t. 1 G i, j G JxJ and i =� j, forms a dependency edge. The classification result C(i, j) can be a boolean value:</bodyText>
<equation confidence="0.574084">
C(i, j) = p p E t0, 11 (1)
</equation>
<bodyText confidence="0.994220517241379">as produced by a support vector machine (SVM) classifier (Vapnik, 1998). p = 1 indicates that the classifier supports the candidate edge (i, j), and p = 0 the contrary. C(i, j) can also be a realvalued probability: C(i,j)=p 0 G p G 1 (2) as produced by an maximum entropy (ME) classifier (Berger et al., 1996). p is a probability which indicates the degree the classifier support the candidate edge (i, j). Ideally, given the classification results for all candidate word pairs, the dependency parse tree can be composed of the candidate edges with higher score (1 for the boolean-valued classifier, and large p for the real-valued classifier). However, more robust strategies should be investigated since the ambiguity of the language syntax and the classification errors usually lead to illegal or incomplete parsing result, as shown in Figure 1. Follow the edge based factorization method (Eisner, 1996), we factorize the score of a dependency tree s(x, y) into its dependency edges, and design a dynamic programming algorithm to search for the candidate parse with maximum score. This strategy alleviate the classification errors to some degree and ensure a valid, complete dependency parsing tree. If a boolean-valued classifier is used, the search algorithm can be formalized as:</bodyText>
<equation confidence="0.997276">
y� = argmax s(x, y)
Y
= argmax � C(i,j) (3)
Y (i,j)∈Y
</equation>
<bodyText confidence="0.986155">And if a probability-valued classifier is used instead, we replace the accumulation with cumula-</bodyText>
<page confidence="0.999236">
13
</page>
<table confidence="0.99836675">
Type Features
Unigram wordi ◦ posi wordi posi
wordj ◦ posj wordj posj
Bigram wordi ◦ posi ◦ wordj ◦ posj posi ◦ wordj ◦ posj wordi ◦ wordj ◦ posj
wordi ◦ posi ◦ posj wordi ◦ posi ◦ wordj wordi ◦ wordj
posi ◦ posj wordi ◦ posj posi ◦ wordj
Surrounding posi ◦ posi+1 ◦ posj−1 ◦ posj posi−1 ◦ posi ◦ posj−1 ◦ posj posi ◦ posi+1 ◦ posj ◦ posj+1
posi−1 ◦ posi ◦ posj ◦ posj+1 posi−1 ◦ posi ◦ posj−1 posi−1 ◦ posi ◦ posj+1
posi ◦ posi+1 ◦ posj−1 posi ◦ posi+1 ◦ posj+1 posi−1 ◦ posj−1 ◦ posj
posi−1 ◦ posj ◦ posj+1 posi+1 ◦ posj−1 ◦ posj posi+1 ◦ posj ◦ posj+1
posi ◦ posj−1 ◦ posj posi ◦ posj ◦ posj+1 posi−1 ◦ posi ◦ posj
posi ◦ posi+1 ◦ posj
</table>
<tableCaption confidence="0.997306">
Table 1: Feature templates for the word-pair classification model.
</tableCaption>
<equation confidence="0.9315122">
tive product:
y� = argmax s(x, y)
Y
= argmax ri C(i,j) (4)
Y (i,j)∈Y
</equation>
<bodyText confidence="0.942680666666667">Where y is searched from the set of well-formed dependency trees. In our work we choose a real-valued ME classifier. Here we give the calculation of dependency probability C(i, j). We use w to denote the parameter vector of the ME model, and f(i, j, r) to denote the feature vector for the assumption that the word pair i and j has a dependency relationship r. The symbol r indicates the supposed classification result, where r = + means we suppose it as a dependency edge and r = − means the contrary. A feature fk(i, j, r) E f(i, j, r) equals 1 if it is activated by the assumption and equals 0 otherwise. The dependency probability can then be defined as:</bodyText>
<equation confidence="0.93440875">
exp(w · f(i, j, +))
C(i, j) = Er exp(w · f(i, j, r))
exp(Ekwk X fk(i,j,+))
Er exp(Ek wk X fk(i, j, r))
</equation>
<subsectionHeader confidence="0.832311">
2.2 Features for Classification
</subsectionHeader>
<bodyText confidence="0.9792126">The feature templates for the classifier are similar to those of 1st-ordered MST model (McDonald et al., 2005a). 1 Each feature is composed of some words and POS tags surrounded word i and/or word j, as well as an optional distance representations between this two words. Table shows the feature templates we use. Previous graph-based dependency models usually use the index distance of word i and word j 1We exclude the in between features of McDonald et al. (2005a) since preliminary experiments show that these features bring no improvement to the word-pair classification model. to enrich the features with word distance information. However, in order to utilize some syntax information between the pair of words, we adopt the syntactic distance representation of (Collins, 1996), named Collins distance for convenience. A Collins distance comprises the answers of 6 questions:</bodyText>
<listItem confidence="0.952940666666667">• Does word i precede or follow word j? • Are word i and word j adjacent? • Is there a verb between word i and word j? • Are there 0, 1, 2 or more than 2 commas between word i and word j? • Is there a comma immediately following the first of word i and word j? • Is there a comma immediately preceding the second of word i and word j?</listItem>
<bodyText confidence="0.99966475">Besides the original features generated according to the templates in Table 1, the enhanced features with Collins distance as postfixes are also used in training and decoding of the word-pair classifier.</bodyText>
<subsectionHeader confidence="0.999736">
2.3 Parsing Algorithm
</subsectionHeader>
<bodyText confidence="0.9999635">We adopt logarithmic dependency probabilities in decoding, therefore the cumulative product of probabilities in formula 6 can be replaced by accumulation of logarithmic probabilities:</bodyText>
<equation confidence="0.998171166666667">
y� = argmax
Y
= argmax
Y
= argmax � log(C(i, j))
Y (i,j)∈Y
</equation>
<bodyText confidence="0.998988">Thus, the decoding algorithm for 1st-ordered MST model, such as the Chu-Liu-Edmonds algorithm (5)
s(x, y)
ri C(i,j) (6)
(i,j)∈Y</bodyText>
<page confidence="0.875402">
14
</page>
<construct confidence="0.549754">
Algorithm 1 Dependency Parsing Algorithm.
</construct>
<listItem confidence="0.959707923076923">1: Input: sentence x to be parsed 2: for (i, j) C (1, JxJ) in topological order do 3: buf +— 0 4: for k +— i..j − 1 do &gt; all partitions 5: for l E V[i, k] and r E V[k + 1, j] do 6: insert DERIV(l, r) into buf 7: insert DERIV(r, l) into buf 8: V[i, j] +— top K derivations of buf 9: Output: the best derivation of V[1, JxJ] 10: function DERIV(p, c) 11: d +— p U c U {(p · root, c · root)} &gt; new derivation 12: d · evl +— EVAL(d) &gt; evaluation function 13: return d used in McDonald et al.(2005b), is also applicable here.</listItem>
<bodyText confidence="0.999471">In this work, however, we still adopt the more general, bottom-up dynamic programming algorithm Algorithm 1 in order to facilitate the possible expansions. Here, V[i, j] contains the candidate parsing segments of the span [i, j], and the function EVAL(d) accumulates the scores of all the edges in dependency segment d. In practice, the cube-pruning strategy (Huang and Chiang, 2005) is used to speed up the enumeration of derivations (loops started by line 4 and 5).</bodyText>
<sectionHeader confidence="0.992034" genericHeader="method">
3 Projected Classification Instance
</sectionHeader>
<bodyText confidence="0.999942647058824">After the introduction of the word-pair classification model, we now describe the extraction of projected dependency instances. In order to alleviate the effect of word alignment errors, we base the projection on the alignment matrix, a compact representation of multiple GIZA++ (Och and Ney, 2000) results, rather than a single word alignment in previous dependency projection works. Figure 2 shows an example. Suppose a bilingual sentence pair, composed of a source sentence e and its target translation f. ye is the parse tree of the source sentence. A is the alignment matrix between them, and each element Ai,j denotes the degree of the alignment between word ei and word fj. We define a boolean-valued function δ(y, i, j, r) to investigate the dependency relationship of word i and word j in parse tree y:</bodyText>
<equation confidence="0.772414142857143">
(i,j) ∈ y and r = +
1 or
(i,j) ∈/y and r = − (7)
0 otherwise
Then the score that word i and word j in the target
sentence y forms a projected dependency edge,
δ(y, i, j, r) = {
</equation>
<figureCaption confidence="0.9979745">
Figure 2: The word alignment matrix between a
Chinese sentence and its English translation. Note
that probabilities need not to be normalized across
rows or columns.
</figureCaption>
<bodyText confidence="0.561813">s+(i, j), can be defined as:</bodyText>
<equation confidence="0.977853">
s+(i,j) = E Ai,i′ × Aj,j′ × δ(ye, i′, j′, +) (8)
i′,j′
</equation>
<bodyText confidence="0.9050935">The score that they do not form a projected dependency edge can be defined similarly:</bodyText>
<equation confidence="0.933586">
s−(i,j) = E Ai,i′ × Aj,j′ × δ(ye, i′, j′, −) (9)
i′,j′
</equation>
<bodyText confidence="0.999728">Note that for simplicity, the condition factors ye and A are omitted from these two formulas. We finally define the probability of the supposed projected dependency edge as:</bodyText>
<equation confidence="0.989188333333333">
exp(s+(i,j))
Cp(i,j) = (10)
exp(s+(i, j)) + exp(s−(i, j))
</equation>
<bodyText confidence="0.999892090909091">The probability Cp(i, j) is a real value between 0 and 1. Obviously, Cp(i, j) = 0.5 indicates the most ambiguous case, where we can not distinguish between positive and negative at all. On the other hand, there are as many as 2|f|(|f|−1) candidate projected dependency instances for the target sentence f. Therefore, we need choose a threshold b for Cp(i, j) to filter out the ambiguous instances: the instances with Cp(i, j) &gt; b are selected as the positive, and the instances with Cp(i, j) &lt; 1 − b are selected as the negative.</bodyText>
<sectionHeader confidence="0.770749" genericHeader="method">
4 Boosting an MST Parser
</sectionHeader>
<bodyText confidence="0.986309">The classifier can be used to boost a existing parser trained on human-annotated trees. We first establish a unified framework for the enhanced parser. For a sentence to be parsed, x, the enhanced parser selects the best parse y� according to both the baseline model B and the projected classifier C.</bodyText>
<equation confidence="0.851207">
y� = argmax [st$(x, y) + λsC(x, y)] (11)
y
</equation>
<page confidence="0.971773">
15
</page>
<bodyText confidence="0.999976346153846">Here, s]B and sr denote the evaluation functions of the baseline model and the projected classifier, respectively. The parameter A is the relative weight of the projected classifier against the baseline model. There are several strategies to integrate the two evaluation functions. For example, they can be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003).</bodyText>
<sectionHeader confidence="0.999975" genericHeader="related work">
5 Related Works
</sectionHeader>
<subsectionHeader confidence="0.995421">
5.1 Dependency Parsing
</subsectionHeader>
<bodyText confidence="0.99998915">Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factored on dependency edges, and its decoding procedure also aims to find a maximum spanning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously differs from other graph-based models, that we only need a set of word-pair dependency instances rather than a regular dependency treebank. Therefore, our model is more suitable for the partially bracketed or noisy training corpus. The most apparent similarity between our model and the transition-based category is that they all need a classifier to perform classification conditioned on a certain configuration. However, they differ from each other in the classification results. The classifier in our model predicates a dependency probability for each pair of words, while the classifier in a transition-based model gives a possible next transition operation such as shift or reduce. Another difference lies in the factorization strategy. For our method, the evaluation score of a candidate parse is factorized into each dependency edge, while for the transition-based models, the score is factorized into each transition operation. Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classification schema has also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm.</bodyText>
<subsectionHeader confidence="0.978547">
5.2 Dependency Projection
</subsectionHeader>
<bodyText confidence="0.999835875">Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang and Liu, 2009) need complete projected trees to train the projected parsers. Because of the free translation, the word alignment errors, and the heterogeneity between two languages, it is reluctant and less effective to project the dependency tree completely to the target language sentence. On the contrary, our dependency projection strategy prefer to extract a set of dependency instances, which coincides our model’s demand for training corpus. An obvious advantage of this strategy is that, we can select an appropriate filtering threshold to obtain dependency instances of good quality. In addition, our word-pair classification model can be integrated deeply into a state-of-the-art MST dependency model. Since both of them are factorized into dependency edges, the integration can be conducted at each dependency edge, by weightedly averaging their evaluation scores for this dependency edge.</bodyText>
<page confidence="0.997044">
16
</page>
<table confidence="0.939041">
Corpus Train Dev Test
WSJ (section) 2-21 22 23
CTB 5.0 (chapter) others 301-325 271-300
</table>
<tableCaption confidence="0.900863">
Table 2: The corpus partition for WSJ and CTB
5.0.
</tableCaption>
<bodyText confidence="0.999150428571429">This strategy makes better use of the projected parser while with faster decoding, compared with the cascaded approach of Jiang and Liu (2009).</bodyText>
<sectionHeader confidence="0.999801" genericHeader="evaluation and result">
6 Experiments
</sectionHeader>
<bodyText confidence="0.999985333333333">In this section, we first validate the word-pair classification model by experimenting on humanannotated treebanks. Then we investigate the effectiveness of the dependency projection by evaluating the projected classifiers trained on the projected classification instances. Finally, we report the performance of the integrated dependency parser which integrates the projected classifier and the 2nd-ordered MST dependency parser. We evaluate the parsing accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents.</bodyText>
<subsectionHeader confidence="0.976697">
6.1 Word-Pair Classification Model
</subsectionHeader>
<bodyText confidence="0.999919636363636">We experiment on two popular treebanks, the Wall Street Journal (WSJ) portion of the Penn English Treebank (Marcus et al., 1993), and the Penn Chinese Treebank (CTB) 5.0 (Xue et al., 2005). The constituent trees in the two treebanks are transformed to dependency trees according to the headfinding rules of Yamada and Matsumoto (2003). For English, we use the automatically-assigned POS tags produced by an implementation of the POS tagger of Collins (2002). While for Chinese, we just use the gold-standard POS tags following the tradition. Each treebank is splitted into three partitions, for training, development and testing, respectively, as shown in Table 2. For a dependency tree with n words, only n − 1 positive dependency instances can be extracted. They account for only a small proportion of all the dependency instances. As we know, it is important to balance the proportions of the positive and the negative instances for a batched-trained classifier. We define a new parameter r to denote the ratio of the negative instances relative to the positive ones.</bodyText>
<figure confidence="0.7367665">
1 1.5 2 2.5 3
Ratio r (#negative/#positive)
</figure>
<figureCaption confidence="0.87643275">
Figure 3: Performance curves of the word-pair
classification model on the development sets of
WSJ and CTB 5.0, with respect to a series of ratio
r.
</figureCaption>
<table confidence="0.999553555555555">
Corpus System P %
WSJ Yamada and Matsumoto (2003) 90.3
Nivre and Scholz (2004) 87.3
1st-ordered MST 90.7
2nd-ordered MST 91.5
our model 86.8
CTB 5.0 1st-ordered MST 86.53
2nd-ordered MST 87.15
our model 82.06
</table>
<tableCaption confidence="0.997428">
Table 3: Performance of the word-pair classifica-
tion model on WSJ and CTB 5.0, compared with the current state-of-the-art models.</tableCaption>
<bodyText confidence="0.978919521739131">For example, r = 2 means we reserve negative instances two times as many as the positive ones. The MaxEnt toolkit by Zhang 2 is adopted to train the ME classifier on extracted instances. We set the gaussian prior as 1.0 and the iteration limit as 100, leaving other parameters as default values. We first investigate the impact of the ratio r on the performance of the classifier. Curves in Figure 3 show the performance of the English and Chinese parsers, each of which is trained on an instance set corresponding to a certain r. We find that for both English and Chinese, maximum performance is achieved at about r = 2.5. 3 The English and Chinese classifiers trained on the instance sets with r = 2.5 are used in the final evaluation phase. Table 3 shows the performances on the test sets of WSJ and CTB 5.0. We also compare them with previous works on the same test sets. On both English and Chinese, the word-pair classification model falls behind of the state-of-the-art. We think that it is probably due to the local optimization of the training procedure.</bodyText>
<footnote confidence="0.9663526">
2http://homepages.inf.ed.ac.uk/s0450736/
maxent toolkit.html.
3We did not investigate more fine-grained ratios, since the
performance curves show no dramatic fluctuation along with
the alteration of r.
</footnote>
<figure confidence="0.952636222222222">
WSJ
CTB 5.0
Dependency Precision (%)
87
86.5
86
85.5
85
84.5
84
17
56
Dependency Precision (%) 55.5
55
54.5
54
0.65 0.7 0.75 0.8 0.85 0.9 0.95
Threshold b
</figure>
<figureCaption confidence="0.867829666666667">
Figure 4: The performance curve of the word-
pair classification model on the development set
of CTB 5.0, with respect to a series of threshold b.
</figureCaption>
<bodyText confidence="0.999848272727273">Given complete trees as training data, it is easy for previous models to utilize structural, global and linguistical information in order to obtain more powerful parameters. The main advantage of our model is that it doesn’t need complete trees to tune its parameters. Therefore, if trained on instances extracted from human-annotated treebanks, the word-pair classification model would not demonstrate its advantage over existed stateof-the-art dependency parsing methods.</bodyText>
<subsectionHeader confidence="0.998128">
6.2 Dependency Projection
</subsectionHeader>
<bodyText confidence="0.999177">In this work we focus on the dependency projection from English to Chinese. We use the FBIS Chinese-English bitext as the bilingual corpus for dependency projection. It contains 239K sentence pairs with about 6.9M/8.9M words in Chinese/English. Both English and Chinese sentences are tagged by the implementations of the POS tagger of Collins (2002), which trained on WSJ and CTB 5.0 respectively. The English sentences are then parsed by an implementation of 2nd-ordered MST model of McDonald and Pereira (2006), which is trained on dependency trees extracted from WSJ. The alignment matrixes for sentence pairs are generated according to (Liu et al., 2009). Similar to the ratio r, the threshold b need also be assigned an appropriate value to achieve a better performance. Larger thresholds result in better but less classification instances, the lower coverage of the instances would hurt the performance of the classifier. On the other hand, smaller thresholds lead to worse but more instances, and too much noisy instances will bring down the classifier’s discriminating power. We extract a series of classification instance sets</bodyText>
<table confidence="0.6689276">
Corpus System P %
CTB 2.0 Hwa et al. (2005) 53.9
our model 56.9
CTB 5.0 Jiang and Liu (2009) 53.28
our model 58.59
</table>
<tableCaption confidence="0.956596">
Table 4: The performance of the projected classi-
fier on the test sets of CTB 2.0 and CTB 5.0, com-
pared with the performance of previous works on
the corresponding test sets.
</tableCaption>
<table confidence="0.999529333333333">
Corpus Baseline P% Integrated P%
CTB 1.0 82.23 83.70
CTB 5.0 87.15 87.65
</table>
<tableCaption confidence="0.996286">
Table 5: Performance improvement brought by
the projected classifier to the baseline 2nd-ordered MST parsers trained on CTB 1.0 and CTB 5.0, respectively.with different thresholds.</tableCaption>
<bodyText confidence="0.992984272727273">Then, on each instance set we train a classifier and test it on the development set of CTB 5.0. Figure 4 presents the experimental results. The curve shows that the maximum performance is achieved at the threshold of about 0.85. The classifier corresponding to this threshold is evaluated on the test set of CTB 5.0, and the test set of CTB 2.0 determined by Hwa et al.(2005). Table 4 shows the performance of the projected classifier, as well as the performance of previous works on the corresponding test sets. The projected classifier significantly outperforms previous works on both test sets, which demonstrates that the word-pair classification model, although falling behind of the state-of-the-art on humanannotated treebanks, performs well in projected dependency parsing. We give the credit to its good collaboration with the word-pair classification instance extraction for dependency projection.</bodyText>
<subsectionHeader confidence="0.976449">
6.3 Integrated Dependency Parser
</subsectionHeader>
<bodyText confidence="0.999851153846154">We integrate the word-pair classification model into the state-of-the-art 2nd-ordered MST model. First, we implement a chart-based dynamic programming parser for the 2nd-ordered MST model, and develop a training procedure based on the perceptron algorithm with averaged parameters (Collins, 2002). On the WSJ corpus, this parser achieves the same performance as that of McDonald and Pereira (2006). Then, at each derivation step of this 2nd-ordered MST parser, we weightedly add the evaluation score given by the projected classifier to the original MST evaluation score. Such a weighted summation of two evaluation scores provides better evaluation for candidate parses.</bodyText>
<page confidence="0.997012">
18
</page>
<bodyText confidence="0.999986222222222">The weight parameter A is tuned by a minimum error-rate training algorithm (Och, 2003). Given a 2nd-ordered MST parser trained on CTB 5.0 as the baseline, the projected classifier brings an accuracy improvement of about 0.5 points. For the baseline trained on the smaller CTB 1.0, whose training set is chapters 1-270 of CTB 5.0, the accuracy improvement is much significant, about 1.5 points over the baseline. It indicates that, the smaller the human-annotated treebank we have, the more significant improvement we can achieve by integrating the projecting classifier. This provides a promising strategy for boosting the parsing performance of resourcescarce languages. Table 5 summarizes the experimental results.</bodyText>
<sectionHeader confidence="0.99737" genericHeader="conclusion">
7 Conclusion and Future Works
</sectionHeader>
<bodyText confidence="0.999986272727273">In this paper, we first describe an intuitionistic method for dependency parsing, which resorts to a classifier to determine whether a word pair forms a dependency edge, and then propose an effective strategy for dependency projection, which produces a set of projected classification instances rather than complete projected trees. Although this parsing method falls behind of previous models, it can collaborate well with the word-pair classification instance extraction strategy for dependency projection, and achieves the state-of-the-art in projected dependency parsing. In addition, when integrated into a 2nd-ordered MST parser, the projected parser brings significant improvement to the baseline, especially for the baseline trained on smaller treebanks. This provides a new strategy for resource-scarce languages to train high-precision dependency parsers. However, considering its lower performance on human-annotated treebanks, the dependency parsing method itself still need a lot of investigations, especially on the training method of the classifier.</bodyText>
<sectionHeader confidence="0.972754" genericHeader="acknowledgments">
Acknowledgement
</sectionHeader>
<bodyText confidence="0.999846">This project was supported by National Natural Science Foundation of China, Contract 60736014, and 863 State Key Project No. 2006AA010108. We are grateful to the anonymous reviewers for their thorough reviewing and valuable suggestions. We show special thanks to Dr. Rebecca Hwa for generous help of sharing the experimental data. We also thank Dr. Yang Liu for sharing the codes of alignment matrix generation, and Dr. Liang Huang for helpful discussions.</bodyText>
<sectionHeader confidence="0.995948" genericHeader="references">
References
</sectionHeader>
<reference confidence="0.999395422222222">
Adam L. Berger, Stephen A. Della Pietra, and Vin-
cent J. Della Pietra. 1996. A maximum entropy
approach to natural language processing. Compu-
tational Linguistics.
Xavier Carreras, Mihai Surdeanu, and Lluis Marquez.
2006. Projective dependency parsing with percep-
tron. In Proceedings of the CoNLL.
Xavier Carreras, Michael Collins, and Terry Koo.
2008. Tag, dynamic programming, and the percep-
tron for efficient, feature-rich parsing. In Proceed-
ings of the CoNLL.
Eugene Charniak and Mark Johnson. 2005. Coarse-
to-fine-grained n-best parsing and discriminative
reranking. In Proceedings of the ACL.
Michael Collins. 1996. A new statistical parser based
on bigram lexical dependencies. In Proceedings of
ACL.
Michael Collins. 2000. Discriminative reranking for
natural language parsing. In Proceedings of the
ICML, pages 175–182.
Michael Collins. 2002. Discriminative training meth-
ods for hidden markov models: Theory and exper-
iments with perceptron algorithms. In Proceedings
of the EMNLP, pages 1–8, Philadelphia, USA.
Jason M. Eisner. 1996. Three new probabilistic mod-
els for dependency parsing: An exploration. In Pro-
ceedings of COLING, pages 340–345.
Kuzman Ganchev, Jennifer Gillenwater, and Ben
Taskar. 2009. Dependency grammar induction via
bitext projection constraints. In Proceedings of the
47th ACL.
Liang Huang and David Chiang. 2005. Better k-best
parsing. In Proceedings of the IWPT, pages 53–64.
Liang Huang. 2008. Forest reranking: Discriminative
parsing with non-local features. In Proceedings of
the ACL.
Rebecca Hwa, Philip Resnik, Amy Weinberg, and
Okan Kolak. 2002. Evaluating translational corre-
spondence using annotation projection. In Proceed-
ings of the ACL.
Rebecca Hwa, Philip Resnik, Amy Weinberg, Clara
Cabezas, and Okan Kolak. 2005. Bootstrapping
parsers via syntactic projection across parallel texts.
In Natural Language Engineering, volume 11, pages
311–325.
</reference>
<page confidence="0.983734">
19
</page>
<reference confidence="0.996567973684211">
Wenbin Jiang and Qun Liu. 2009. Automatic adapta-
tion of annotation standards for dependency parsing
using projected treebank as source corpus. In Pro-
ceedings ofIWPT.
Wenbin Jiang, Liang Huang, and Qun Liu. 2009. Au-
tomatic adaptation of annotation standards: Chinese
word segmentation and pos tagging–a case study. In
Proceedings of the 47th ACL.
Dan Klein and Christopher D. Manning. 2004. Cor-
pusbased induction of syntactic structure: Models of
dependency and constituency. In Proceedings of the
ACL.
Terry Koo, Xavier Carreras, and Michael Collins.
2008. Simple semi-supervised dependency parsing.
In Proceedings of the ACL.
Taku Kudo and Yuji Matsumoto. 2000. Japanese de-
pendency structure analysis based on support vector
machines. In Proceedings of the EMNLP.
Yang Liu, Tian Xia, Xinyan Xiao, and Qun Liu. 2009.
Weighted alignment matrices for statistical machine
translation. In Proceedings of the EMNLP.
Yajuan L¨u, Sheng Li, Tiejun Zhao, and Muyun Yang.
2002. Learning chinese bracketing knowledge
based on a bilingual language model. In Proceed-
ings of the COLING.
Mitchell P. Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated
corpus of english: The penn treebank. In Computa-
tional Linguistics.
Ryan McDonald and Fernando Pereira. 2006. Online
learning of approximate dependency parsing algo-
rithms. In Proceedings ofEACL, pages 81–88.
Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005a. Online large-margin training of de-
pendency parsers. In Proceedings ofACL, pages 91–
98.
Ryan McDonald, Fernando Pereira, Kiril Ribarov, and
Jan HajiL 2005b. Non-projective dependency pars-
ing using spanning tree algorithms. In Proceedings
ofHLT-EMNLP.
J. Nivre and M. Scholz. 2004. Deterministic depen-
dency parsing of english text. In Proceedings of the
COLING.
Joakim Nivre, Johan Hall, Jens Nilsson, Gulsen
Eryigit, and Svetoslav Marinov. 2006. Labeled
pseudoprojective dependency parsing with support
vector machines. In Proceedings of CoNLL, pages
221–225.
Franz J. Och and Hermann Ney. 2000. Improved
statistical alignment models. In Proceedings of the
ACL.
Franz Joseph Och. 2003. Minimum error rate training
in statistical machine translation. In Proceedings of
the ACL, pages 160–167.
David Smith and Jason Eisner. 2009. Parser adap-
tation and projection with quasi-synchronous gram-
mar features. In Proceedings of EMNLP.
Kiyotaka Uchimoto, Satoshi Sekine, and Hitoshi Isa-
hara. 1999. Japanese dependency structure analysis
based on maximum entropy models. In Proceedings
of the EACL.
Vladimir N. Vapnik. 1998. Statistical learning theory.
In A Wiley-Interscience Publication.
Dekai Wu. 1997. Stochastic inversion transduction
grammars and bilingual parsing of parallel corpora.
Computational Linguistics.
Nianwen Xue, Fei Xia, Fu-Dong Chiou, and Martha
Palmer. 2005. The penn chinese treebank: Phrase
structure annotation of a large corpus. In Natural
Language Engineering.
H Yamada and Y Matsumoto. 2003. Statistical depen-
dency analysis using support vector machines. In
Proceedings ofIWPT.
Yue Zhang and Stephen Clark. 2008. Joint word seg-
mentation and pos tagging using a single perceptron.
In Proceedings of the ACL.
</reference>
<page confidence="0.99455">
20
</page>
</variant>
</algorithm>
<algorithm name="ParsHed" version="110505">
<variant confidence="0.737085" no="0">
<title confidence="0.999489">Dependency Parsing and Projection Based on Word-Pair Classification</title>
<author confidence="0.993838">Jiang Liu</author>
<affiliation confidence="0.948749666666667">Key Laboratory of Intelligent Information Processing Institute of Computing Technology Chinese Academy of Sciences</affiliation>
<address confidence="0.99462">P.O. Box 2704, Beijing 100190, China</address>
<abstract confidence="0.9934172">In this paper we describe an intuitionistic method for dependency parsing, where a classifier is used to determine whether a pair of words forms a dependency edge. And we also propose an effective strategy for dependency projection, where the dependency relationships of the word pairs in the source language are projected to the word pairs of the target language, leading to a set of classification instances rather than a complete tree. Experiments show that, the classifier trained on the projected classification instances significantly outperforms previous projected dependency parsers. More importantly, when this classifier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline.</abstract>
</variant>
</algorithm>
<algorithm name="ParsCit" version="110505">
<citationList>
<citation valid="true">
<authors>
<author>Adam L Berger</author>
<author>Stephen A Della Pietra</author>
<author>Vincent J Della Pietra</author>
</authors>
<title>A maximum entropy approach to natural language processing. Computational Linguistics.</title>
<date>1996</date>
<contexts>
<context citStr="Berger et al., 1996" endWordPosition="997" position="6328" startWordPosition="994">cy edge from word xi to word xj, where xi is the parent of xj. The task of the word-pair classification model is to determine whether any candidate word pair, xi and xj s.t. 1 G i, j G JxJ and i =� j, forms a dependency edge. The classification result C(i, j) can be a boolean value: C(i, j) = p p E t0, 11 (1) as produced by a support vector machine (SVM) classifier (Vapnik, 1998). p = 1 indicates that the classifier supports the candidate edge (i, j), and p = 0 the contrary. C(i, j) can also be a realvalued probability: C(i,j)=p 0 G p G 1 (2) as produced by an maximum entropy (ME) classifier (Berger et al., 1996). p is a probability which indicates the degree the classifier support the candidate edge (i, j). Ideally, given the classification results for all candidate word pairs, the dependency parse tree can be composed of the candidate edges with higher score (1 for the boolean-valued classifier, and large p for the real-valued classifier). However, more robust strategies should be investigated since the ambiguity of the language syntax and the classification errors usually lead to illegal or incomplete parsing result, as shown in Figure 1. Follow the edge based factorization method (Eisner, 1996), w</context>
</contexts>
<marker>Berger, Pietra, Pietra, 1996</marker>
<rawString>Adam L. Berger, Stephen A. Della Pietra, and Vincent J. Della Pietra. 1996. A maximum entropy approach to natural language processing. Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xavier Carreras</author>
<author>Mihai Surdeanu</author>
<author>Lluis Marquez</author>
</authors>
<title>Projective dependency parsing with perceptron.</title>
<date>2006</date>
<booktitle>In Proceedings of the CoNLL.</booktitle>
<contexts>
<context citStr="Carreras et al., 2006" endWordPosition="2701" position="15753" startWordPosition="2698">grated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5 Related Works 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factored on dependency edges, and its decoding procedure also aims to find a maximum spanning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously differs from other graph-based models, that we only need a set of word-pair dependency instances rather than a regular dependency treebank. Th</context>
</contexts>
<marker>Carreras, Surdeanu, Marquez, 2006</marker>
<rawString>Xavier Carreras, Mihai Surdeanu, and Lluis Marquez. 2006. Projective dependency parsing with perceptron. In Proceedings of the CoNLL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Xavier Carreras</author>
<author>Michael Collins</author>
<author>Terry Koo</author>
</authors>
<title>Tag, dynamic programming, and the perceptron for efficient, feature-rich parsing.</title>
<date>2008</date>
<booktitle>In Proceedings of the CoNLL.</booktitle>
<contexts>
<context citStr="Carreras et al., 2008" endWordPosition="2546" position="14793" startWordPosition="2543">t establish a unified framework for the enhanced parser. For a sentence to be parsed, x, the enhanced parser selects the best parse y� according to both the baseline model B and the projected classifier C. y� = argmax [st$(x, y) + λsC(x, y)] (11) y 15 Here, s]B and sr denote the evaluation functions of the baseline model and the projected classifier, respectively. The parameter A is the relative weight of the projected classifier against the baseline model. There are several strategies to integrate the two evaluation functions. For example, they can be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect </context>
</contexts>
<marker>Carreras, Collins, Koo, 2008</marker>
<rawString>Xavier Carreras, Michael Collins, and Terry Koo. 2008. Tag, dynamic programming, and the perceptron for efficient, feature-rich parsing. In Proceedings of the CoNLL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Eugene Charniak</author>
<author>Mark Johnson</author>
</authors>
<title>Coarseto-fine-grained n-best parsing and discriminative reranking.</title>
<date>2005</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Charniak and Johnson, 2005" endWordPosition="2568" position="14928" startWordPosition="2565">se y� according to both the baseline model B and the projected classifier C. y� = argmax [st$(x, y) + λsC(x, y)] (11) y 15 Here, s]B and sr denote the evaluation functions of the baseline model and the projected classifier, respectively. The parameter A is the relative weight of the projected classifier against the baseline model. There are several strategies to integrate the two evaluation functions. For example, they can be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on th</context>
</contexts>
<marker>Charniak, Johnson, 2005</marker>
<rawString>Eugene Charniak and Mark Johnson. 2005. Coarseto-fine-grained n-best parsing and discriminative reranking. In Proceedings of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>A new statistical parser based on bigram lexical dependencies.</title>
<date>1996</date>
<booktitle>In Proceedings of ACL.</booktitle>
<contexts>
<context citStr="Collins, 1996" endWordPosition="1636" position="9809" startWordPosition="1635">rrounded word i and/or word j, as well as an optional distance representations between this two words. Table shows the feature templates we use. Previous graph-based dependency models usually use the index distance of word i and word j 1We exclude the in between features of McDonald et al. (2005a) since preliminary experiments show that these features bring no improvement to the word-pair classification model. to enrich the features with word distance information. However, in order to utilize some syntax information between the pair of words, we adopt the syntactic distance representation of (Collins, 1996), named Collins distance for convenience. A Collins distance comprises the answers of 6 questions: • Does word i precede or follow word j? • Are word i and word j adjacent? • Is there a verb between word i and word j? • Are there 0, 1, 2 or more than 2 commas between word i and word j? • Is there a comma immediately following the first of word i and word j? • Is there a comma immediately preceding the second of word i and word j? Besides the original features generated according to the templates in Table 1, the enhanced features with Collins distance as postfixes are also used in training and </context>
</contexts>
<marker>Collins, 1996</marker>
<rawString>Michael Collins. 1996. A new statistical parser based on bigram lexical dependencies. In Proceedings of ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Discriminative reranking for natural language parsing.</title>
<date>2000</date>
<booktitle>In Proceedings of the ICML,</booktitle>
<pages>175--182</pages>
<contexts>
<context citStr="Collins, 2000" endWordPosition="2564" position="14899" startWordPosition="2563">ts the best parse y� according to both the baseline model B and the projected classifier C. y� = argmax [st$(x, y) + λsC(x, y)] (11) y 15 Here, s]B and sr denote the evaluation functions of the baseline model and the projected classifier, respectively. The parameter A is the relative weight of the projected classifier against the baseline model. There are several strategies to integrate the two evaluation functions. For example, they can be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to m</context>
</contexts>
<marker>Collins, 2000</marker>
<rawString>Michael Collins. 2000. Discriminative reranking for natural language parsing. In Proceedings of the ICML, pages 175–182.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Michael Collins</author>
</authors>
<title>Discriminative training methods for hidden markov models: Theory and experiments with perceptron algorithms.</title>
<date>2002</date>
<booktitle>In Proceedings of the EMNLP,</booktitle>
<pages>1--8</pages>
<location>Philadelphia, USA.</location>
<contexts>
<context citStr="Collins (2002)" endWordPosition="3444" position="20495" startWordPosition="3443">g accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents. 6.1 Word-Pair Classification Model We experiment on two popular treebanks, the Wall Street Journal (WSJ) portion of the Penn English Treebank (Marcus et al., 1993), and the Penn Chinese Treebank (CTB) 5.0 (Xue et al., 2005). The constituent trees in the two treebanks are transformed to dependency trees according to the headfinding rules of Yamada and Matsumoto (2003). For English, we use the automatically-assigned POS tags produced by an implementation of the POS tagger of Collins (2002). While for Chinese, we just use the gold-standard POS tags following the tradition. Each treebank is splitted into three partitions, for training, development and testing, respectively, as shown in Table 2. For a dependency tree with n words, only n − 1 positive dependency instances can be extracted. They account for only a small proportion of all the dependency instances. As we know, it is important to balance the proportions of the positive and the negative instances for a batched-trained classifier. We define a new parameter r to denote the ratio of the negative instances relative to the p</context>
<context citStr="Collins (2002)" endWordPosition="4041" position="24055" startWordPosition="4040">ete trees to tune its parameters. Therefore, if trained on instances extracted from human-annotated treebanks, the word-pair classification model would not demonstrate its advantage over existed stateof-the-art dependency parsing methods. 6.2 Dependency Projection In this work we focus on the dependency projection from English to Chinese. We use the FBIS Chinese-English bitext as the bilingual corpus for dependency projection. It contains 239K sentence pairs with about 6.9M/8.9M words in Chinese/English. Both English and Chinese sentences are tagged by the implementations of the POS tagger of Collins (2002), which trained on WSJ and CTB 5.0 respectively. The English sentences are then parsed by an implementation of 2nd-ordered MST model of McDonald and Pereira (2006), which is trained on dependency trees extracted from WSJ. The alignment matrixes for sentence pairs are generated according to (Liu et al., 2009). Similar to the ratio r, the threshold b need also be assigned an appropriate value to achieve a better performance. Larger thresholds result in better but less classification instances, the lower coverage of the instances would hurt the performance of the classifier. On the other hand, sm</context>
<context citStr="Collins, 2002" endWordPosition="4455" position="26624" startWordPosition="4454">he word-pair classification model, although falling behind of the state-of-the-art on humanannotated treebanks, performs well in projected dependency parsing. We give the credit to its good collaboration with the word-pair classification instance extraction for dependency projection. 6.3 Integrated Dependency Parser We integrate the word-pair classification model into the state-of-the-art 2nd-ordered MST model. First, we implement a chart-based dynamic programming parser for the 2nd-ordered MST model, and develop a training procedure based on the perceptron algorithm with averaged parameters (Collins, 2002). On the WSJ corpus, this parser achieves the same performance as that of McDonald and Pereira (2006). Then, at each derivation step of this 2nd-ordered MST parser, we weightedly add the evaluation score given by the projected classifier to the original MST evaluation score. Such a weighted summation of two eval18 uation scores provides better evaluation for candidate parses. The weight parameter A is tuned by a minimum error-rate training algorithm (Och, 2003). Given a 2nd-ordered MST parser trained on CTB 5.0 as the baseline, the projected classifier brings an accuracy improvement of about 0</context>
</contexts>
<marker>Collins, 2002</marker>
<rawString>Michael Collins. 2002. Discriminative training methods for hidden markov models: Theory and experiments with perceptron algorithms. In Proceedings of the EMNLP, pages 1–8, Philadelphia, USA.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Jason M Eisner</author>
</authors>
<title>Three new probabilistic models for dependency parsing: An exploration.</title>
<date>1996</date>
<booktitle>In Proceedings of COLING,</booktitle>
<pages>340--345</pages>
<contexts>
<context citStr="Eisner, 1996" endWordPosition="1092" position="6925" startWordPosition="1091">er et al., 1996). p is a probability which indicates the degree the classifier support the candidate edge (i, j). Ideally, given the classification results for all candidate word pairs, the dependency parse tree can be composed of the candidate edges with higher score (1 for the boolean-valued classifier, and large p for the real-valued classifier). However, more robust strategies should be investigated since the ambiguity of the language syntax and the classification errors usually lead to illegal or incomplete parsing result, as shown in Figure 1. Follow the edge based factorization method (Eisner, 1996), we factorize the score of a dependency tree s(x, y) into its dependency edges, and design a dynamic programming algorithm to search for the candidate parse with maximum score. This strategy alleviate the classification errors to some degree and ensure a valid, complete dependency parsing tree. If a boolean-valued classifier is used, the search algorithm can be formalized as: y� = argmax s(x, y) Y = argmax � C(i,j) (3) Y (i,j)∈Y And if a probability-valued classifier is used instead, we replace the accumulation with cumula13 Type Features Unigram wordi ◦ posi wordi posi wordj ◦ posj wordj pos</context>
</contexts>
<marker>Eisner, 1996</marker>
<rawString>Jason M. Eisner. 1996. Three new probabilistic models for dependency parsing: An exploration. In Proceedings of COLING, pages 340–345.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kuzman Ganchev</author>
<author>Jennifer Gillenwater</author>
<author>Ben Taskar</author>
</authors>
<title>Dependency grammar induction via bitext projection constraints.</title>
<date>2009</date>
<booktitle>In Proceedings of the 47th ACL.</booktitle>
<contexts>
<context citStr="Ganchev et al., 2009" endWordPosition="293" position="1937" startWordPosition="290">utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some hand-designed rules to</context>
<context citStr="Ganchev et al. (2009)" endWordPosition="3007" position="17685" startWordPosition="3004">e transition-based models, the score is factorized into each transition operation. Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classification schema has also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang and Liu, 2009) need complete projected trees to train the</context>
</contexts>
<marker>Ganchev, Gillenwater, Taskar, 2009</marker>
<rawString>Kuzman Ganchev, Jennifer Gillenwater, and Ben Taskar. 2009. Dependency grammar induction via bitext projection constraints. In Proceedings of the 47th ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Liang Huang</author>
<author>David Chiang</author>
</authors>
<title>Better k-best parsing.</title>
<date>2005</date>
<booktitle>In Proceedings of the IWPT,</booktitle>
<pages>53--64</pages>
<contexts>
<context citStr="Huang and Chiang, 2005" endWordPosition="2008" position="11789" startWordPosition="2004"> Output: the best derivation of V[1, JxJ] 10: function DERIV(p, c) 11: d +— p U c U {(p · root, c · root)} &gt; new derivation 12: d · evl +— EVAL(d) &gt; evaluation function 13: return d used in McDonald et al. (2005b), is also applicable here. In this work, however, we still adopt the more general, bottom-up dynamic programming algorithm Algorithm 1 in order to facilitate the possible expansions. Here, V[i, j] contains the candidate parsing segments of the span [i, j], and the function EVAL(d) accumulates the scores of all the edges in dependency segment d. In practice, the cube-pruning strategy (Huang and Chiang, 2005) is used to speed up the enumeration of derivations (loops started by line 4 and 5). 3 Projected Classification Instance After the introduction of the word-pair classification model, we now describe the extraction of projected dependency instances. In order to alleviate the effect of word alignment errors, we base the projection on the alignment matrix, a compact representation of multiple GIZA++ (Och and Ney, 2000) results, rather than a single word alignment in previous dependency projection works. Figure 2 shows an example. Suppose a bilingual sentence pair, composed of a source sentence e </context>
</contexts>
<marker>Huang, Chiang, 2005</marker>
<rawString>Liang Huang and David Chiang. 2005. Better k-best parsing. In Proceedings of the IWPT, pages 53–64.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Liang Huang</author>
</authors>
<title>Forest reranking: Discriminative parsing with non-local features.</title>
<date>2008</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Huang, 2008" endWordPosition="2552" position="14830" startWordPosition="2551">ed parser. For a sentence to be parsed, x, the enhanced parser selects the best parse y� according to both the baseline model B and the projected classifier C. y� = argmax [st$(x, y) + λsC(x, y)] (11) y 15 Here, s]B and sr denote the evaluation functions of the baseline model and the projected classifier, respectively. The parameter A is the relative weight of the projected classifier against the baseline model. There are several strategies to integrate the two evaluation functions. For example, they can be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseli</context>
</contexts>
<marker>Huang, 2008</marker>
<rawString>Liang Huang. 2008. Forest reranking: Discriminative parsing with non-local features. In Proceedings of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Hwa</author>
<author>Philip Resnik</author>
<author>Amy Weinberg</author>
<author>Okan Kolak</author>
</authors>
<title>Evaluating translational correspondence using annotation projection.</title>
<date>2002</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Hwa et al., 2002" endWordPosition="285" position="1897" startWordPosition="282">works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduc</context>
</contexts>
<marker>Hwa, Resnik, Weinberg, Kolak, 2002</marker>
<rawString>Rebecca Hwa, Philip Resnik, Amy Weinberg, and Okan Kolak. 2002. Evaluating translational correspondence using annotation projection. In Proceedings of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Rebecca Hwa</author>
<author>Philip Resnik</author>
<author>Amy Weinberg</author>
<author>Clara Cabezas</author>
<author>Okan Kolak</author>
</authors>
<title>Bootstrapping parsers via syntactic projection across parallel texts.</title>
<date>2005</date>
<journal>In Natural Language Engineering,</journal>
<volume>11</volume>
<pages>311--325</pages>
<contexts>
<context citStr="Hwa et al., 2005" endWordPosition="289" position="1915" startWordPosition="286">en devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some </context>
<context citStr="Hwa et al. (2005)" endWordPosition="3002" position="17659" startWordPosition="2999">ncy edge, while for the transition-based models, the score is factorized into each transition operation. Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classification schema has also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang and Liu, 2009) need complete pr</context>
<context citStr="Hwa et al. (2005)" endWordPosition="4178" position="24885" startWordPosition="4175">rom WSJ. The alignment matrixes for sentence pairs are generated according to (Liu et al., 2009). Similar to the ratio r, the threshold b need also be assigned an appropriate value to achieve a better performance. Larger thresholds result in better but less classification instances, the lower coverage of the instances would hurt the performance of the classifier. On the other hand, smaller thresholds lead to worse but more instances, and too much noisy instances will bring down the classifier’s discriminating power. We extract a series of classification instance sets Corpus System P % CTB 2.0 Hwa et al. (2005) 53.9 our model 56.9 CTB 5.0 Jiang and Liu (2009) 53.28 our model 58.59 Table 4: The performance of the projected classifier on the test sets of CTB 2.0 and CTB 5.0, compared with the performance of previous works on the corresponding test sets. Corpus Baseline P% Integrated P% CTB 1.0 82.23 83.70 CTB 5.0 87.15 87.65 Table 5: Performance improvement brought by the projected classifier to the baseline 2nd-ordered MST parsers trained on CTB 1.0 and CTB 5.0, respectively. with different thresholds. Then, on each instance set we train a classifier and test it on the development set of CTB 5.0. Fig</context>
</contexts>
<marker>Hwa, Resnik, Weinberg, Cabezas, Kolak, 2005</marker>
<rawString>Rebecca Hwa, Philip Resnik, Amy Weinberg, Clara Cabezas, and Okan Kolak. 2005. Bootstrapping parsers via syntactic projection across parallel texts. In Natural Language Engineering, volume 11, pages 311–325.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wenbin Jiang</author>
<author>Qun Liu</author>
</authors>
<title>Automatic adaptation of annotation standards for dependency parsing using projected treebank as source corpus.</title>
<date>2009</date>
<booktitle>In Proceedings ofIWPT.</booktitle>
<contexts>
<context citStr="Jiang and Liu (2009)" endWordPosition="410" position="2710" startWordPosition="407">across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some hand-designed rules to handle language heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with quasi-synchronous grammar features. Jiang and Liu (2009) resort to a dynamic programming procedure to search for a completed projected tree. However, these strategies are all confined to the same category that dependency projection must produce completed projected trees. Because of the free translation, the syntactic isomerism between languages and word alignment errors, it would be strained to completely project the dependency structure from one language to another. We propose an effective method for dependency projection, which does not have to produce complete projected trees. Given a wordaligned bilingual corpus with source language sentences p</context>
<context citStr="Jiang and Liu (2009)" endWordPosition="3053" position="17997" startWordPosition="3050">ws more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang and Liu, 2009) need complete projected trees to train the projected parsers. Because of the free translation, the word alignment errors, and the heterogeneity between two languages, it is reluctant and less effective to project the dependency tree completely to the target language sentence. On the contrary, our dependency projection strategy prefer to extract a set o</context>
<context citStr="Jiang and Liu (2009)" endWordPosition="3277" position="19413" startWordPosition="3274"> instances of good quality. In addition, our word-pair classification model can be integrated deeply into a state-of-the-art MST dependency model. Since both of them are 16 Corpus Train Dev Test WSJ (section) 2-21 22 23 CTB 5.0 (chapter) others 301-325 271-300 Table 2: The corpus partition for WSJ and CTB 5.0. factorized into dependency edges, the integration can be conducted at each dependency edge, by weightedly averaging their evaluation scores for this dependency edge. This strategy makes better use of the projected parser while with faster decoding, compared with the cascaded approach of Jiang and Liu (2009). 6 Experiments In this section, we first validate the word-pair classification model by experimenting on humanannotated treebanks. Then we investigate the effectiveness of the dependency projection by evaluating the projected classifiers trained on the projected classification instances. Finally, we report the performance of the integrated dependency parser which integrates the projected classifier and the 2nd-ordered MST dependency parser. We evaluate the parsing accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents. 6.1 Word-P</context>
<context citStr="Jiang and Liu (2009)" endWordPosition="4188" position="24934" startWordPosition="4185">airs are generated according to (Liu et al., 2009). Similar to the ratio r, the threshold b need also be assigned an appropriate value to achieve a better performance. Larger thresholds result in better but less classification instances, the lower coverage of the instances would hurt the performance of the classifier. On the other hand, smaller thresholds lead to worse but more instances, and too much noisy instances will bring down the classifier’s discriminating power. We extract a series of classification instance sets Corpus System P % CTB 2.0 Hwa et al. (2005) 53.9 our model 56.9 CTB 5.0 Jiang and Liu (2009) 53.28 our model 58.59 Table 4: The performance of the projected classifier on the test sets of CTB 2.0 and CTB 5.0, compared with the performance of previous works on the corresponding test sets. Corpus Baseline P% Integrated P% CTB 1.0 82.23 83.70 CTB 5.0 87.15 87.65 Table 5: Performance improvement brought by the projected classifier to the baseline 2nd-ordered MST parsers trained on CTB 1.0 and CTB 5.0, respectively. with different thresholds. Then, on each instance set we train a classifier and test it on the development set of CTB 5.0. Figure 4 presents the experimental results. The curv</context>
</contexts>
<marker>Jiang, Liu, 2009</marker>
<rawString>Wenbin Jiang and Qun Liu. 2009. Automatic adaptation of annotation standards for dependency parsing using projected treebank as source corpus. In Proceedings ofIWPT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Wenbin Jiang</author>
<author>Liang Huang</author>
<author>Qun Liu</author>
</authors>
<title>Automatic adaptation of annotation standards: Chinese word segmentation and pos tagging–a case study.</title>
<date>2009</date>
<booktitle>In Proceedings of the 47th ACL.</booktitle>
<contexts>
<context citStr="Jiang et al., 2009" endWordPosition="301" position="1982" startWordPosition="298">the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some hand-designed rules to handle language heterogeneity. Smith and Eis</context>
</contexts>
<marker>Jiang, Huang, Liu, 2009</marker>
<rawString>Wenbin Jiang, Liang Huang, and Qun Liu. 2009. Automatic adaptation of annotation standards: Chinese word segmentation and pos tagging–a case study. In Proceedings of the 47th ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dan Klein</author>
<author>Christopher D Manning</author>
</authors>
<title>Corpusbased induction of syntactic structure: Models of dependency and constituency.</title>
<date>2004</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Klein and Manning, 2004" endWordPosition="210" position="1424" startWordPosition="207">on instances significantly outperforms previous projected dependency parsers. More importantly, when this classifier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline. 1 Introduction Supervised dependency parsing achieves the stateof-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build humanannotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relations</context>
</contexts>
<marker>Klein, Manning, 2004</marker>
<rawString>Dan Klein and Christopher D. Manning. 2004. Corpusbased induction of syntactic structure: Models of dependency and constituency. In Proceedings of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Terry Koo</author>
<author>Xavier Carreras</author>
<author>Michael Collins</author>
</authors>
<title>Simple semi-supervised dependency parsing.</title>
<date>2008</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Koo et al., 2008" endWordPosition="227" position="1529" startWordPosition="224">fier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline. 1 Introduction Supervised dependency parsing achieves the stateof-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build humanannotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in t</context>
</contexts>
<marker>Koo, Carreras, Collins, 2008</marker>
<rawString>Terry Koo, Xavier Carreras, and Michael Collins. 2008. Simple semi-supervised dependency parsing. In Proceedings of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Taku Kudo</author>
<author>Yuji Matsumoto</author>
</authors>
<title>Japanese dependency structure analysis based on support vector machines.</title>
<date>2000</date>
<booktitle>In Proceedings of the EMNLP.</booktitle>
<contexts>
<context citStr="Kudo and Matsumoto, 2000" endWordPosition="2956" position="17354" startWordPosition="2953">es a dependency probability for each pair of words, while the classifier in a transition-based model gives a possible next transition operation such as shift or reduce. Another difference lies in the factorization strategy. For our method, the evaluation score of a candidate parse is factorized into each dependency edge, while for the transition-based models, the score is factorized into each transition operation. Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classification schema has also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchro</context>
</contexts>
<marker>Kudo, Matsumoto, 2000</marker>
<rawString>Taku Kudo and Yuji Matsumoto. 2000. Japanese dependency structure analysis based on support vector machines. In Proceedings of the EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yang Liu</author>
<author>Tian Xia</author>
<author>Xinyan Xiao</author>
<author>Qun Liu</author>
</authors>
<title>Weighted alignment matrices for statistical machine translation.</title>
<date>2009</date>
<booktitle>In Proceedings of the EMNLP.</booktitle>
<contexts>
<context citStr="Liu et al., 2009" endWordPosition="4090" position="24364" startWordPosition="4087">rojection from English to Chinese. We use the FBIS Chinese-English bitext as the bilingual corpus for dependency projection. It contains 239K sentence pairs with about 6.9M/8.9M words in Chinese/English. Both English and Chinese sentences are tagged by the implementations of the POS tagger of Collins (2002), which trained on WSJ and CTB 5.0 respectively. The English sentences are then parsed by an implementation of 2nd-ordered MST model of McDonald and Pereira (2006), which is trained on dependency trees extracted from WSJ. The alignment matrixes for sentence pairs are generated according to (Liu et al., 2009). Similar to the ratio r, the threshold b need also be assigned an appropriate value to achieve a better performance. Larger thresholds result in better but less classification instances, the lower coverage of the instances would hurt the performance of the classifier. On the other hand, smaller thresholds lead to worse but more instances, and too much noisy instances will bring down the classifier’s discriminating power. We extract a series of classification instance sets Corpus System P % CTB 2.0 Hwa et al. (2005) 53.9 our model 56.9 CTB 5.0 Jiang and Liu (2009) 53.28 our model 58.59 Table 4</context>
</contexts>
<marker>Liu, Xia, Xiao, Liu, 2009</marker>
<rawString>Yang Liu, Tian Xia, Xinyan Xiao, and Qun Liu. 2009. Weighted alignment matrices for statistical machine translation. In Proceedings of the EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yajuan L¨u</author>
<author>Sheng Li</author>
<author>Tiejun Zhao</author>
<author>Muyun Yang</author>
</authors>
<title>Learning chinese bracketing knowledge based on a bilingual language model.</title>
<date>2002</date>
<booktitle>In Proceedings of the COLING.</booktitle>
<marker>L¨u, Li, Zhao, Yang, 2002</marker>
<rawString>Yajuan L¨u, Sheng Li, Tiejun Zhao, and Muyun Yang. 2002. Learning chinese bracketing knowledge based on a bilingual language model. In Proceedings of the COLING.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Mitchell P Marcus</author>
<author>Beatrice Santorini</author>
<author>Mary Ann Marcinkiewicz</author>
</authors>
<title>Building a large annotated corpus of english: The penn treebank.</title>
<date>1993</date>
<booktitle>In Computational Linguistics.</booktitle>
<contexts>
<context citStr="Marcus et al., 1993" endWordPosition="3389" position="20166" startWordPosition="3386">hen we investigate the effectiveness of the dependency projection by evaluating the projected classifiers trained on the projected classification instances. Finally, we report the performance of the integrated dependency parser which integrates the projected classifier and the 2nd-ordered MST dependency parser. We evaluate the parsing accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents. 6.1 Word-Pair Classification Model We experiment on two popular treebanks, the Wall Street Journal (WSJ) portion of the Penn English Treebank (Marcus et al., 1993), and the Penn Chinese Treebank (CTB) 5.0 (Xue et al., 2005). The constituent trees in the two treebanks are transformed to dependency trees according to the headfinding rules of Yamada and Matsumoto (2003). For English, we use the automatically-assigned POS tags produced by an implementation of the POS tagger of Collins (2002). While for Chinese, we just use the gold-standard POS tags following the tradition. Each treebank is splitted into three partitions, for training, development and testing, respectively, as shown in Table 2. For a dependency tree with n words, only n − 1 positive depende</context>
</contexts>
<marker>Marcus, Santorini, Marcinkiewicz, 1993</marker>
<rawString>Mitchell P. Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz. 1993. Building a large annotated corpus of english: The penn treebank. In Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Fernando Pereira</author>
</authors>
<title>Online learning of approximate dependency parsing algorithms.</title>
<date>2006</date>
<booktitle>In Proceedings ofEACL,</booktitle>
<pages>81--88</pages>
<contexts>
<context citStr="McDonald and Pereira, 2006" endWordPosition="171" position="1181" startWordPosition="168">f the word pairs in the source language are projected to the word pairs of the target language, leading to a set of classification instances rather than a complete tree. Experiments show that, the classifier trained on the projected classification instances significantly outperforms previous projected dependency parsers. More importantly, when this classifier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline. 1 Introduction Supervised dependency parsing achieves the stateof-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build humanannotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the depe</context>
<context citStr="McDonald and Pereira, 2006" endWordPosition="706" position="4674" startWordPosition="703">weden, 11-16 July 2010. c�2010 Association for Computational Linguistics Figure 1: Illegal (a) and incomplete (b) dependency tree produced by the simple-collection method. Experimental results show that, the classifier trained on the projected classification instances significantly outperforms the projected dependency parsers in previous works. The classifier trained on the Chinese projected classification instances achieves a precision of 58.59% on the CTB standard test set. More importantly, when this classifier is integrated into a 2nd-ordered maximum spanning tree (MST) dependency parser (McDonald and Pereira, 2006) in a weighted average manner, significant improvement is obtained over the MST baselines. For the 2nd-order MST parser trained on Penn Chinese Treebank (CTB) 5.0, the classifier give an precision increment of 0.5 points. Especially for the parser trained on the smaller CTB 1.0, more than 1 points precision increment is obtained. In the rest of this paper, we first describe the word-pair classification model for dependency parsing (section 2) and the generation method of projected classification instances (section 3). Then we describe an application of the projected parser: boosting a state-of</context>
<context citStr="McDonald and Pereira, 2006" endWordPosition="2638" position="15352" startWordPosition="2634">an be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5 Related Works 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factor</context>
<context citStr="McDonald and Pereira (2006)" endWordPosition="4067" position="24218" startWordPosition="4064">d not demonstrate its advantage over existed stateof-the-art dependency parsing methods. 6.2 Dependency Projection In this work we focus on the dependency projection from English to Chinese. We use the FBIS Chinese-English bitext as the bilingual corpus for dependency projection. It contains 239K sentence pairs with about 6.9M/8.9M words in Chinese/English. Both English and Chinese sentences are tagged by the implementations of the POS tagger of Collins (2002), which trained on WSJ and CTB 5.0 respectively. The English sentences are then parsed by an implementation of 2nd-ordered MST model of McDonald and Pereira (2006), which is trained on dependency trees extracted from WSJ. The alignment matrixes for sentence pairs are generated according to (Liu et al., 2009). Similar to the ratio r, the threshold b need also be assigned an appropriate value to achieve a better performance. Larger thresholds result in better but less classification instances, the lower coverage of the instances would hurt the performance of the classifier. On the other hand, smaller thresholds lead to worse but more instances, and too much noisy instances will bring down the classifier’s discriminating power. We extract a series of class</context>
<context citStr="McDonald and Pereira (2006)" endWordPosition="4473" position="26725" startWordPosition="4469">manannotated treebanks, performs well in projected dependency parsing. We give the credit to its good collaboration with the word-pair classification instance extraction for dependency projection. 6.3 Integrated Dependency Parser We integrate the word-pair classification model into the state-of-the-art 2nd-ordered MST model. First, we implement a chart-based dynamic programming parser for the 2nd-ordered MST model, and develop a training procedure based on the perceptron algorithm with averaged parameters (Collins, 2002). On the WSJ corpus, this parser achieves the same performance as that of McDonald and Pereira (2006). Then, at each derivation step of this 2nd-ordered MST parser, we weightedly add the evaluation score given by the projected classifier to the original MST evaluation score. Such a weighted summation of two eval18 uation scores provides better evaluation for candidate parses. The weight parameter A is tuned by a minimum error-rate training algorithm (Och, 2003). Given a 2nd-ordered MST parser trained on CTB 5.0 as the baseline, the projected classifier brings an accuracy improvement of about 0.5 points. For the baseline trained on the smaller CTB 1.0, whose training set is chapters 1-270 of C</context>
</contexts>
<marker>McDonald, Pereira, 2006</marker>
<rawString>Ryan McDonald and Fernando Pereira. 2006. Online learning of approximate dependency parsing algorithms. In Proceedings ofEACL, pages 81–88.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Ryan McDonald</author>
<author>Koby Crammer</author>
<author>Fernando Pereira</author>
</authors>
<title>Online large-margin training of dependency parsers.</title>
<date>2005</date>
<booktitle>In Proceedings ofACL,</booktitle>
<pages>91--98</pages>
<contexts>
<context citStr="McDonald et al., 2005" endWordPosition="167" position="1152" startWordPosition="164">pendency relationships of the word pairs in the source language are projected to the word pairs of the target language, leading to a set of classification instances rather than a complete tree. Experiments show that, the classifier trained on the projected classification instances significantly outperforms previous projected dependency parsers. More importantly, when this classifier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline. 1 Introduction Supervised dependency parsing achieves the stateof-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build humanannotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising</context>
<context citStr="McDonald et al., 2005" endWordPosition="834" position="5527" startWordPosition="831"> for the parser trained on the smaller CTB 1.0, more than 1 points precision increment is obtained. In the rest of this paper, we first describe the word-pair classification model for dependency parsing (section 2) and the generation method of projected classification instances (section 3). Then we describe an application of the projected parser: boosting a state-of-the-art 2nd-ordered MST parser (section 4). After the comparisons with previous works on dependency parsing and projection, we finally five the experimental results. 2 Word-Pair Classification Model 2.1 Model Definition Following (McDonald et al., 2005a), x is used to denote the sentence to be parsed, and xi to denote the i-th word in the sentence. y denotes the dependency tree for sentence x, and (i, j) E y represents a dependency edge from word xi to word xj, where xi is the parent of xj. The task of the word-pair classification model is to determine whether any candidate word pair, xi and xj s.t. 1 G i, j G JxJ and i =� j, forms a dependency edge. The classification result C(i, j) can be a boolean value: C(i, j) = p p E t0, 11 (1) as produced by a support vector machine (SVM) classifier (Vapnik, 1998). p = 1 indicates that the classifier</context>
<context citStr="McDonald et al., 2005" endWordPosition="1526" position="9135" startWordPosition="1522">for the assumption that the word pair i and j has a dependency relationship r. The symbol r indicates the supposed classification result, where r = + means we suppose it as a dependency edge and r = − means the contrary. A feature fk(i, j, r) E f(i, j, r) equals 1 if it is activated by the assumption and equals 0 otherwise. The dependency probability can then be defined as: exp(w · f(i, j, +)) C(i, j) = Er exp(w · f(i, j, r)) exp(Ekwk X fk(i,j,+)) Er exp(Ek wk X fk(i, j, r)) 2.2 Features for Classification The feature templates for the classifier are similar to those of 1st-ordered MST model (McDonald et al., 2005a). 1 Each feature is composed of some words and POS tags surrounded word i and/or word j, as well as an optional distance representations between this two words. Table shows the feature templates we use. Previous graph-based dependency models usually use the index distance of word i and word j 1We exclude the in between features of McDonald et al. (2005a) since preliminary experiments show that these features bring no improvement to the word-pair classification model. to enrich the features with word distance information. However, in order to utilize some syntax information between the pair o</context>
<context citStr="McDonald et al. (2005" endWordPosition="1940" position="11377" startWordPosition="1937"> MST model, such as the Chu-Liu-Edmonds algorithm (5) s(x, y) ri C(i,j) (6) (i,j)∈Y 14 Algorithm 1 Dependency Parsing Algorithm. 1: Input: sentence x to be parsed 2: for (i, j) C (1, JxJ) in topological order do 3: buf +— 0 4: for k +— i..j − 1 do &gt; all partitions 5: for l E V[i, k] and r E V[k + 1, j] do 6: insert DERIV(l, r) into buf 7: insert DERIV(r, l) into buf 8: V[i, j] +— top K derivations of buf 9: Output: the best derivation of V[1, JxJ] 10: function DERIV(p, c) 11: d +— p U c U {(p · root, c · root)} &gt; new derivation 12: d · evl +— EVAL(d) &gt; evaluation function 13: return d used in McDonald et al. (2005b), is also applicable here. In this work, however, we still adopt the more general, bottom-up dynamic programming algorithm Algorithm 1 in order to facilitate the possible expansions. Here, V[i, j] contains the candidate parsing segments of the span [i, j], and the function EVAL(d) accumulates the scores of all the edges in dependency segment d. In practice, the cube-pruning strategy (Huang and Chiang, 2005) is used to speed up the enumeration of derivations (loops started by line 4 and 5). 3 Projected Classification Instance After the introduction of the word-pair classification model, we no</context>
<context citStr="McDonald et al., 2005" endWordPosition="2693" position="15700" startWordPosition="2690">ree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5 Related Works 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factored on dependency edges, and its decoding procedure also aims to find a maximum spanning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously differs from other graph-based models, that we only need a set of word-pair dependency in</context>
</contexts>
<marker>McDonald, Crammer, Pereira, 2005</marker>
<rawString>Ryan McDonald, Koby Crammer, and Fernando Pereira. 2005a. Online large-margin training of dependency parsers. In Proceedings ofACL, pages 91– 98.</rawString>
</citation>
<citation valid="false">
<authors>
<author>Ryan McDonald</author>
</authors>
<title>Fernando Pereira, Kiril Ribarov, and Jan HajiL 2005b. Non-projective dependency parsing using spanning tree algorithms.</title>
<booktitle>In Proceedings ofHLT-EMNLP.</booktitle>
<marker>McDonald, </marker>
<rawString>Ryan McDonald, Fernando Pereira, Kiril Ribarov, and Jan HajiL 2005b. Non-projective dependency parsing using spanning tree algorithms. In Proceedings ofHLT-EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>J Nivre</author>
<author>M Scholz</author>
</authors>
<title>Deterministic dependency parsing of english text.</title>
<date>2004</date>
<booktitle>In Proceedings of the COLING.</booktitle>
<contexts>
<context citStr="Nivre and Scholz (2004)" endWordPosition="3592" position="21379" startWordPosition="3589">ve dependency instances can be extracted. They account for only a small proportion of all the dependency instances. As we know, it is important to balance the proportions of the positive and the negative instances for a batched-trained classifier. We define a new parameter r to denote the ratio of the negative instances relative to the positive ones. 1 1.5 2 2.5 3 Ratio r (#negative/#positive) Figure 3: Performance curves of the word-pair classification model on the development sets of WSJ and CTB 5.0, with respect to a series of ratio r. Corpus System P % WSJ Yamada and Matsumoto (2003) 90.3 Nivre and Scholz (2004) 87.3 1st-ordered MST 90.7 2nd-ordered MST 91.5 our model 86.8 CTB 5.0 1st-ordered MST 86.53 2nd-ordered MST 87.15 our model 82.06 Table 3: Performance of the word-pair classification model on WSJ and CTB 5.0, compared with the current state-of-the-art models. For example, r = 2 means we reserve negative instances two times as many as the positive ones. The MaxEnt toolkit by Zhang 2 is adopted to train the ME classifier on extracted instances. We set the gaussian prior as 1.0 and the iteration limit as 100, leaving other parameters as default values. We first investigate the impact of the rati</context>
</contexts>
<marker>Nivre, Scholz, 2004</marker>
<rawString>J. Nivre and M. Scholz. 2004. Deterministic dependency parsing of english text. In Proceedings of the COLING.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Joakim Nivre</author>
<author>Johan Hall</author>
<author>Jens Nilsson</author>
<author>Gulsen Eryigit</author>
<author>Svetoslav Marinov</author>
</authors>
<title>Labeled pseudoprojective dependency parsing with support vector machines.</title>
<date>2006</date>
<booktitle>In Proceedings of CoNLL,</booktitle>
<pages>221--225</pages>
<contexts>
<context citStr="Nivre et al., 2006" endWordPosition="175" position="1202" startWordPosition="172">ce language are projected to the word pairs of the target language, leading to a set of classification instances rather than a complete tree. Experiments show that, the classifier trained on the projected classification instances significantly outperforms previous projected dependency parsers. More importantly, when this classifier is integrated into a maximum spanning tree (MST) dependency parser, obvious improvement is obtained over the MST baseline. 1 Introduction Supervised dependency parsing achieves the stateof-the-art in recent years (McDonald et al., 2005a; McDonald and Pereira, 2006; Nivre et al., 2006). Since it is costly and difficult to build humanannotated treebanks, a lot of works have also been devoted to the utilization of unannotated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures fro</context>
<context citStr="Nivre et al., 2006" endWordPosition="2713" position="15827" startWordPosition="2710">n score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5 Related Works 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factored on dependency edges, and its decoding procedure also aims to find a maximum spanning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously differs from other graph-based models, that we only need a set of word-pair dependency instances rather than a regular dependency treebank. Therefore, our model is more suitable for the partially bracketed or noisy t</context>
</contexts>
<marker>Nivre, Hall, Nilsson, Eryigit, Marinov, 2006</marker>
<rawString>Joakim Nivre, Johan Hall, Jens Nilsson, Gulsen Eryigit, and Svetoslav Marinov. 2006. Labeled pseudoprojective dependency parsing with support vector machines. In Proceedings of CoNLL, pages 221–225.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz J Och</author>
<author>Hermann Ney</author>
</authors>
<title>Improved statistical alignment models.</title>
<date>2000</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Och and Ney, 2000" endWordPosition="2076" position="12208" startWordPosition="2073">andidate parsing segments of the span [i, j], and the function EVAL(d) accumulates the scores of all the edges in dependency segment d. In practice, the cube-pruning strategy (Huang and Chiang, 2005) is used to speed up the enumeration of derivations (loops started by line 4 and 5). 3 Projected Classification Instance After the introduction of the word-pair classification model, we now describe the extraction of projected dependency instances. In order to alleviate the effect of word alignment errors, we base the projection on the alignment matrix, a compact representation of multiple GIZA++ (Och and Ney, 2000) results, rather than a single word alignment in previous dependency projection works. Figure 2 shows an example. Suppose a bilingual sentence pair, composed of a source sentence e and its target translation f. ye is the parse tree of the source sentence. A is the alignment matrix between them, and each element Ai,j denotes the degree of the alignment between word ei and word fj. We define a boolean-valued function δ(y, i, j, r) to investigate the dependency relationship of word i and word j in parse tree y: (i,j) ∈ y and r = + 1 or (i,j) ∈/y and r = − (7) 0 otherwise Then the score that word </context>
</contexts>
<marker>Och, Ney, 2000</marker>
<rawString>Franz J. Och and Hermann Ney. 2000. Improved statistical alignment models. In Proceedings of the ACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Franz Joseph Och</author>
</authors>
<title>Minimum error rate training in statistical machine translation.</title>
<date>2003</date>
<booktitle>In Proceedings of the ACL,</booktitle>
<pages>160--167</pages>
<contexts>
<context citStr="Och, 2003" endWordPosition="2680" position="15616" startWordPosition="2679"> classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5 Related Works 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factored on dependency edges, and its decoding procedure also aims to find a maximum spanning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously diffe</context>
<context citStr="Och, 2003" endWordPosition="4533" position="27089" startWordPosition="4532">parser for the 2nd-ordered MST model, and develop a training procedure based on the perceptron algorithm with averaged parameters (Collins, 2002). On the WSJ corpus, this parser achieves the same performance as that of McDonald and Pereira (2006). Then, at each derivation step of this 2nd-ordered MST parser, we weightedly add the evaluation score given by the projected classifier to the original MST evaluation score. Such a weighted summation of two eval18 uation scores provides better evaluation for candidate parses. The weight parameter A is tuned by a minimum error-rate training algorithm (Och, 2003). Given a 2nd-ordered MST parser trained on CTB 5.0 as the baseline, the projected classifier brings an accuracy improvement of about 0.5 points. For the baseline trained on the smaller CTB 1.0, whose training set is chapters 1-270 of CTB 5.0, the accuracy improvement is much significant, about 1.5 points over the baseline. It indicates that, the smaller the human-annotated treebank we have, the more significant improvement we can achieve by integrating the projecting classifier. This provides a promising strategy for boosting the parsing performance of resourcescarce languages. Table 5 summar</context>
</contexts>
<marker>Och, 2003</marker>
<rawString>Franz Joseph Och. 2003. Minimum error rate training in statistical machine translation. In Proceedings of the ACL, pages 160–167.</rawString>
</citation>
<citation valid="true">
<authors>
<author>David Smith</author>
<author>Jason Eisner</author>
</authors>
<title>Parser adaptation and projection with quasi-synchronous grammar features.</title>
<date>2009</date>
<booktitle>In Proceedings of EMNLP.</booktitle>
<contexts>
<context citStr="Smith and Eisner, 2009" endWordPosition="297" position="1961" startWordPosition="294">ated text. For example, the unsupervised dependency parsing (Klein and Manning, 2004) which is totally based on unannotated data, and the semisupervised dependency parsing (Koo et al., 2008) which is based on both annotated and unannotated data. Considering the higher complexity and lower performance in unsupervised parsing, and the need of reliable priori knowledge in semisupervised parsing, it is a promising strategy to project the dependency structures from a resource-rich language to a resource-scarce one across a bilingual corpus (Hwa et al., 2002; Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang et al., 2009). For dependency projection, the relationship between words in the parsed sentences can be simply projected across the word alignment to words in the unparsed sentences, according to the DCA assumption (Hwa et al., 2005). Such a projection procedure suffers much from the word alignment errors and syntactic isomerism between languages, which usually lead to relationship projection conflict and incomplete projected dependency structures. To tackle this problem, Hwa et al. (2005) use some filtering rules to reduce noise, and some hand-designed rules to handle language heterog</context>
<context citStr="Smith and Eisner (2009)" endWordPosition="3038" position="17879" startWordPosition="3035">as also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang and Liu, 2009) need complete projected trees to train the projected parsers. Because of the free translation, the word alignment errors, and the heterogeneity between two languages, it is reluctant and less effective to project the dependency tree com</context>
</contexts>
<marker>Smith, Eisner, 2009</marker>
<rawString>David Smith and Jason Eisner. 2009. Parser adaptation and projection with quasi-synchronous grammar features. In Proceedings of EMNLP.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Kiyotaka Uchimoto</author>
<author>Satoshi Sekine</author>
<author>Hitoshi Isahara</author>
</authors>
<title>Japanese dependency structure analysis based on maximum entropy models.</title>
<date>1999</date>
<booktitle>In Proceedings of the EACL.</booktitle>
<contexts>
<context citStr="Uchimoto et al., 1999" endWordPosition="2952" position="17327" startWordPosition="2949">r in our model predicates a dependency probability for each pair of words, while the classifier in a transition-based model gives a possible next transition operation such as shift or reduce. Another difference lies in the factorization strategy. For our method, the evaluation score of a candidate parse is factorized into each dependency edge, while for the transition-based models, the score is factorized into each transition operation. Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classification schema has also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation ad</context>
</contexts>
<marker>Uchimoto, Sekine, Isahara, 1999</marker>
<rawString>Kiyotaka Uchimoto, Satoshi Sekine, and Hitoshi Isahara. 1999. Japanese dependency structure analysis based on maximum entropy models. In Proceedings of the EACL.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Vladimir N Vapnik</author>
</authors>
<title>Statistical learning theory. In A Wiley-Interscience Publication.</title>
<date>1998</date>
<contexts>
<context citStr="Vapnik, 1998" endWordPosition="949" position="6090" startWordPosition="948"> Model Definition Following (McDonald et al., 2005a), x is used to denote the sentence to be parsed, and xi to denote the i-th word in the sentence. y denotes the dependency tree for sentence x, and (i, j) E y represents a dependency edge from word xi to word xj, where xi is the parent of xj. The task of the word-pair classification model is to determine whether any candidate word pair, xi and xj s.t. 1 G i, j G JxJ and i =� j, forms a dependency edge. The classification result C(i, j) can be a boolean value: C(i, j) = p p E t0, 11 (1) as produced by a support vector machine (SVM) classifier (Vapnik, 1998). p = 1 indicates that the classifier supports the candidate edge (i, j), and p = 0 the contrary. C(i, j) can also be a realvalued probability: C(i,j)=p 0 G p G 1 (2) as produced by an maximum entropy (ME) classifier (Berger et al., 1996). p is a probability which indicates the degree the classifier support the candidate edge (i, j). Ideally, given the classification results for all candidate word pairs, the dependency parse tree can be composed of the candidate edges with higher score (1 for the boolean-valued classifier, and large p for the real-valued classifier). However, more robust strat</context>
</contexts>
<marker>Vapnik, 1998</marker>
<rawString>Vladimir N. Vapnik. 1998. Statistical learning theory. In A Wiley-Interscience Publication.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Dekai Wu</author>
</authors>
<title>Stochastic inversion transduction grammars and bilingual parsing of parallel corpora.</title>
<date>1997</date>
<journal>Computational Linguistics.</journal>
<contexts>
<context citStr="Wu, 1997" endWordPosition="2997" position="17630" startWordPosition="2996">zed into each dependency edge, while for the transition-based models, the score is factorized into each transition operation. Thanks to the reminding of the third reviewer of our paper, we find that the pairwise classification schema has also been used in Japanese dependency parsing (Uchimoto et al., 1999; Kudo and Matsumoto, 2000). However, our work shows more advantage in feature engineering, model training and decoding algorithm. 5.2 Dependency Projection Many works try to learn parsing knowledge from bilingual corpora. L¨u et al. (2002) aims to obtain Chinese bracketing knowledge via ITG (Wu, 1997) alignment. Hwa et al. (2005) and Ganchev et al. (2009) induce dependency grammar via projection from aligned bilingual corpora, and use some thresholds to filter out noise and some hand-written rules to handle heterogeneity. Smith and Eisner (2009) perform dependency projection and annotation adaptation with Quasi-Synchronous Grammar features. Jiang and Liu (2009) refer to alignment matrix and a dynamic programming search algorithm to obtain better projected dependency trees. All previous works for dependency projection (Hwa et al., 2005; Ganchev et al., 2009; Smith and Eisner, 2009; Jiang an</context>
</contexts>
<marker>Wu, 1997</marker>
<rawString>Dekai Wu. 1997. Stochastic inversion transduction grammars and bilingual parsing of parallel corpora. Computational Linguistics.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Nianwen Xue</author>
<author>Fei Xia</author>
<author>Fu-Dong Chiou</author>
<author>Martha Palmer</author>
</authors>
<title>The penn chinese treebank: Phrase structure annotation of a large corpus.</title>
<date>2005</date>
<journal>In Natural Language Engineering.</journal>
<contexts>
<context citStr="Xue et al., 2005" endWordPosition="3401" position="20226" startWordPosition="3398">on by evaluating the projected classifiers trained on the projected classification instances. Finally, we report the performance of the integrated dependency parser which integrates the projected classifier and the 2nd-ordered MST dependency parser. We evaluate the parsing accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents. 6.1 Word-Pair Classification Model We experiment on two popular treebanks, the Wall Street Journal (WSJ) portion of the Penn English Treebank (Marcus et al., 1993), and the Penn Chinese Treebank (CTB) 5.0 (Xue et al., 2005). The constituent trees in the two treebanks are transformed to dependency trees according to the headfinding rules of Yamada and Matsumoto (2003). For English, we use the automatically-assigned POS tags produced by an implementation of the POS tagger of Collins (2002). While for Chinese, we just use the gold-standard POS tags following the tradition. Each treebank is splitted into three partitions, for training, development and testing, respectively, as shown in Table 2. For a dependency tree with n words, only n − 1 positive dependency instances can be extracted. They account for only a smal</context>
</contexts>
<marker>Xue, Xia, Chiou, Palmer, 2005</marker>
<rawString>Nianwen Xue, Fei Xia, Fu-Dong Chiou, and Martha Palmer. 2005. The penn chinese treebank: Phrase structure annotation of a large corpus. In Natural Language Engineering.</rawString>
</citation>
<citation valid="true">
<authors>
<author>H Yamada</author>
<author>Y Matsumoto</author>
</authors>
<title>Statistical dependency analysis using support vector machines.</title>
<date>2003</date>
<booktitle>In Proceedings ofIWPT.</booktitle>
<contexts>
<context citStr="Yamada and Matsumoto, 2003" endWordPosition="2709" position="15806" startWordPosition="2705">dency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance in the baseline model is also investigated. The relative weight A is adjusted to maximize the performance on the development set, using an algorithm similar to minimum error-rate training (Och, 2003). 5 Related Works 5.1 Dependency Parsing Both the graph-based (McDonald et al., 2005a; McDonald and Pereira, 2006; Carreras et al., 2006) and the transition-based (Yamada and Matsumoto, 2003; Nivre et al., 2006) parsing algorithms are related to our word-pair classification model. Similar to the graph-based method, our model is factored on dependency edges, and its decoding procedure also aims to find a maximum spanning tree in a fully connected directed graph. From this point, our model can be classified into the graph-based category. On the training method, however, our model obviously differs from other graph-based models, that we only need a set of word-pair dependency instances rather than a regular dependency treebank. Therefore, our model is more suitable for the partially</context>
<context citStr="Yamada and Matsumoto (2003)" endWordPosition="3425" position="20372" startWordPosition="3422">integrated dependency parser which integrates the projected classifier and the 2nd-ordered MST dependency parser. We evaluate the parsing accuracy by the precision of lexical heads, which is the percentage of the words that have found their correct parents. 6.1 Word-Pair Classification Model We experiment on two popular treebanks, the Wall Street Journal (WSJ) portion of the Penn English Treebank (Marcus et al., 1993), and the Penn Chinese Treebank (CTB) 5.0 (Xue et al., 2005). The constituent trees in the two treebanks are transformed to dependency trees according to the headfinding rules of Yamada and Matsumoto (2003). For English, we use the automatically-assigned POS tags produced by an implementation of the POS tagger of Collins (2002). While for Chinese, we just use the gold-standard POS tags following the tradition. Each treebank is splitted into three partitions, for training, development and testing, respectively, as shown in Table 2. For a dependency tree with n words, only n − 1 positive dependency instances can be extracted. They account for only a small proportion of all the dependency instances. As we know, it is important to balance the proportions of the positive and the negative instances fo</context>
</contexts>
<marker>Yamada, Matsumoto, 2003</marker>
<rawString>H Yamada and Y Matsumoto. 2003. Statistical dependency analysis using support vector machines. In Proceedings ofIWPT.</rawString>
</citation>
<citation valid="true">
<authors>
<author>Yue Zhang</author>
<author>Stephen Clark</author>
</authors>
<title>Joint word segmentation and pos tagging using a single perceptron.</title>
<date>2008</date>
<booktitle>In Proceedings of the ACL.</booktitle>
<contexts>
<context citStr="Zhang and Clark, 2008" endWordPosition="2550" position="14816" startWordPosition="2547">ramework for the enhanced parser. For a sentence to be parsed, x, the enhanced parser selects the best parse y� according to both the baseline model B and the projected classifier C. y� = argmax [st$(x, y) + λsC(x, y)] (11) y 15 Here, s]B and sr denote the evaluation functions of the baseline model and the projected classifier, respectively. The parameter A is the relative weight of the projected classifier against the baseline model. There are several strategies to integrate the two evaluation functions. For example, they can be integrated deeply at each decoding step (Carreras et al., 2008; Zhang and Clark, 2008; Huang, 2008), or can be integrated shallowly in a reranking manner (Collins, 2000; Charniak and Johnson, 2005). As described previously, the score of a dependency tree given by a word-pair classifier can be factored into each candidate dependency edge in this tree. Therefore, the projected classifier can be integrated with a baseline model deeply at each dependency edge, if the evaluation score given by the baseline model can also be factored into dependency edges. We choose the 2nd-ordered MST model (McDonald and Pereira, 2006) as the baseline. Especially, the effect of the Collins distance</context>
</contexts>
<marker>Zhang, Clark, 2008</marker>
<rawString>Yue Zhang and Stephen Clark. 2008. Joint word segmentation and pos tagging using a single perceptron. In Proceedings of the ACL.</rawString>
</citation>
</citationList>
</algorithm>
</algorithms>